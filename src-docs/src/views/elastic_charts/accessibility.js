import React, { Fragment } from 'react';

import { ExternalBadge } from './shared';

import {
  EuiCode,
  EuiCodeBlock,
  EuiSpacer,
  EuiFlexGroup,
  EuiFlexItem,
  EuiCard,
  EuiIcon,
  EuiText,
  EuiListGroup,
} from '../../../../src/components';
import { TextureMultiSeriesChart } from './texture';

const warningCard = [
  {
    title: 'Warning',
    iconType: 'alert',
    iconColor: 'warning',
    description: (
      <>
        Data tables are <strong>not yet available</strong> for chart types{' '}
        <strong>besides</strong> partition charts{' '}
      </>
    ),
  },
];

export const ElasticChartsAccessiblityExample = {
  title: 'Accessibility Features in Elastic Charts',
  intro: (
    <Fragment>
      <ExternalBadge />
      <EuiSpacer size="l" />
      <EuiText>
        Elastic charts is becoming more and more accessible for users of
        assistive technologies.
      </EuiText>
      <EuiSpacer />
      <EuiText>
        <strong>Available a11y configurations</strong>
      </EuiText>
      <EuiListGroup>
        <li>
          <EuiCode language="js">ariaDescription/ariaDescribedBy</EuiCode>
        </li>
        <li>
          <EuiCode language="js">ariaLabel/ariaLabelledBy</EuiCode>
        </li>
        <li>
          <EuiCode language="js">ariaLabelHeadingLevel</EuiCode>
        </li>
        <li>
          <EuiCode language="js">
            ariaUseDefaultSummary/ariaTableCaption
          </EuiCode>
        </li>
        <li>
          <EuiCode language="js">texture</EuiCode>
        </li>
      </EuiListGroup>
    </Fragment>
  ),
  sections: [
    {
      title: 'ariaDescription and ariaDescribedBy',
      text: (
        <>
          The ariaDescription and ariaDescribedBy can be set via the through the{' '}
          <EuiCode>{'<Settings />'}</EuiCode> component.
          <EuiSpacer />
          <EuiCodeBlock language="javascript" isCopyable fontSize="s">
            {`<Settings 
ariaDescription="This chart has three different types of series. There is a bar, line and area series." 
ariaUseDefaultSummary={false} 
/>`}
          </EuiCodeBlock>
        </>
      ),
    },
    {
      title: 'ariaLabel and ariaLabelledBy',
      text: (
        <>
          <p>
            Within the <EuiCode>{'<Settings />'}</EuiCode> component, you can
            add your own aria-label on the figure surrounding the chart element.
            Use the <EuiCode>{'ariaLabel'}</EuiCode> prop on the{' '}
            <EuiCode>{'<Settings />'}</EuiCode> component. The aria-labeledby
            can be set with the <EuiCode>{'ariaLabelledBy'}</EuiCode> prop to
            tie the charts to other accessible elements within your app.
          </p>
        </>
      ),
    },
    {
      title: 'ariaLabelHeadingLevel',
      text: (
        <p>
          You can also change the heading level (instead of{' '}
          <EuiCode>{'p'}</EuiCode> as the default) by passing the
          ariaLabelHeadingLevel to the
          <EuiCode>{'<Settings />'}</EuiCode> component. Valid options are{' '}
          <EuiCode>{`h1,
          h2, h3, h4, h5, h6,`}</EuiCode>{' '}
          or
          <EuiCode>{'p'}</EuiCode>.
        </p>
      ),
    },
    {
      title: 'ariaUseDefaultSummary and ariaTableCaption',
      text: (
        <>
          The default description generated by elastic charts can be disabled by
          setting <EuiCode>{'ariaUseDefaultSummary={false}'}</EuiCode> in the{' '}
          <EuiCode>{'<Settings />'}</EuiCode> component.
          <EuiSpacer />
          <EuiCode>{'ariaTableCaption'}</EuiCode> is available to set a caption
          to the data table for users of assistive technologies.
          <EuiSpacer />
          <EuiFlexGroup responsive={false} wrap>
            {warningCard.map((card) => (
              <EuiFlexItem key={card.title} style={{ minWidth: 170 }}>
                <EuiCard
                  layout="horizontal"
                  title={
                    <EuiFlexGroup
                      gutterSize="s"
                      responsive={false}
                      alignItems="center">
                      <EuiFlexItem grow={false}>
                        <EuiIcon type={card.iconType} color={card.iconColor} />
                      </EuiFlexItem>
                      <EuiFlexItem>{card.title}</EuiFlexItem>
                    </EuiFlexGroup>
                  }
                  titleElement="h2"
                  description={card.description}
                />
              </EuiFlexItem>
            ))}
          </EuiFlexGroup>
        </>
      ),
    },
    {
      title: 'Texture',
      demo: <TextureMultiSeriesChart />,
      text: (
        <>
          You can set the fill for area charts with texture fills with the{' '}
          <EuiCode>{'TextureStyles interface'}</EuiCode>
          <EuiSpacer />
          <EuiCodeBlock language="javascript">
            {`interface TexturedStylesBase {
  /** polygon fill color for texture */
  fill?: Color | ColorVariant;
  /** polygon stroke color for texture */
  stroke?: Color | ColorVariant;
  /** polygon stroke width for texture  */
  strokeWidth?: number;
  /** polygon opacity for texture  */
  opacity?: number;
  /** polygon opacity for texture  */
  dash?: number[];
  /** polygon opacity for texture  */
  size?: number;
  /**
   * The angle of rotation for entire texture
   * in degrees
   */
  rotation?: number;
  /**
   * The angle of rotation for polygons
   * in degrees
   */
  shapeRotation?: number;
  /** texture spacing between polygons */
  spacing?: Partial<Point> | number;
  /** overall origin offset of pattern */
  offset?: Partial<Point> & {
    /** apply offset along global coordinate axes */
    global?: boolean;
  };
}

interface TexturedShapeStyles extends TexturedStylesBase {
  /** typed of texture designs currently supported */
  shape: TextureShape;
}

interface TexturedPathStyles extends TexturedStylesBase {
  /** path for polygon texture */
  path: string | Path2D;
}

/**
 * @public
 *
 * Texture style config for area spec
 */
export type TexturedStyles = TexturedPathStyles | TexturedShapeStyles;`}
          </EuiCodeBlock>
        </>
      ),
    },
  ],
};
