.euiSuperDatePicker__flexWrapper {
  max-width: 100%;
  // Set a sensible min-width for when width is auto
  min-width: MIN(($euiFormMaxWidth / 2) + $euiSuperDatePickerButtonWidth + $euiSizeS, 100%);
  width: $euiSuperDatePickerWidth + $euiSuperDatePickerButtonWidth + $euiSizeS;

  @include euiBreakpoint('xs', 's') {
    width: 100%;
  }

  &.euiSuperDatePicker__flexWrapper--fullWidth {
    width: 100%;
  }

  &.euiSuperDatePicker__flexWrapper--isQuickSelectOnly {
    min-width: 0;
  }

  &.euiSuperDatePicker__flexWrapper--autoWidth {
    display: inline-flex;
    width: auto;
  }
}

.euiSuperDatePicker__flexWrapper--isAutoRefreshOnly {
  min-width: MIN($euiFormMaxWidth / 2, 100%);
  width: $euiFormMaxWidth;
}

.euiSuperDatePicker__flexWrapper--noUpdateButton {
  min-width: MIN($euiFormMaxWidth / 2, 100%);
  width: $euiSuperDatePickerWidth;
}

.euiSuperDatePicker {
  // Allow it to always grow to fit the container since the default form max width is too small
  // stylelint-disable-next-line declaration-no-important
  max-width: 100% !important;

  > .euiFormControlLayout__childrenWrapper {
    flex: 1 1 100%;
    overflow: hidden;

    > .euiDatePickerRange {
      max-width: none;
      width: auto;
      border-radius: 0 $euiFormControlBorderRadius $euiFormControlBorderRadius 0;
    }

    &:not(:last-child) > .euiDatePickerRange {
      &,
      .euiDatePopoverButton--end,
      .euiSuperDatePicker__prettyFormat {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }
    }
  }
}

.euiSuperDatePicker__prettyFormat {
  @include euiSuperDatePickerText;
  display: flex;
  justify-content: space-between;
  text-align: left;

  &:not(:disabled):hover,
  &:focus {
    text-decoration: none;
  }

  &:disabled {
    background-color: $euiFormBackgroundDisabledColor;
    color: $euiColorDarkShade;
    cursor: not-allowed;
  }
}
