
@function euiFormControlGradient($color: $euiColorPrimary) {
  @return linear-gradient(to top,
    $color,
    $color 2px,
    transparent 2px,
    transparent 100%
  );
}

/**
 * 1. Ensure the icon padding remains when in readOnly mode
 */

@mixin euiFormControlSize($height: $euiFormControlHeight) {
  max-width: $euiFormMaxWidth;
  width: 100%;
  height: $height;
}

@mixin euiFormControlWithIcon($isIconOptional: false, $side: "left") {
  @if ($isIconOptional) {
    @at-root {
      #{&}--withIcon,
      #{&}--withIcon[readOnly] /* 1 */ {
        @include euiFormControlLayout__padding(1, $side);
      }
    }
  } @else {
    &,
    &[readOnly] /* 1 */ {
      @include euiFormControlLayout__padding(1, $side);
    }
  }
}

@mixin euiFormControlIsLoading($isNextToIcon: false) {
  @at-root {
    #{&}-isLoading {
      @if ($isNextToIcon) {
        @include euiFormControlLayout__padding(2);
      } @else {
        @include euiFormControlLayout__padding(1);
      }
    }
  }
}

@mixin euiFormControlDefaultShadow($borderOnly: false) {
  background-color: $euiFormBackgroundColor;
  background-repeat: no-repeat;
  background-size: 0%;

  @if ($borderOnly) {
    box-shadow: inset 0 0 0 1px $euiFormBorderColor;
  } @else {
    box-shadow:
      0 1px 1px -1px rgba($euiShadowColor, 0.2),
      0 3px 2px -2px rgba($euiShadowColor, 0.2),
      inset 0 0 0 1px $euiFormBorderColor;
  }

  transition:
    box-shadow $euiAnimSpeedFast ease-in,
    background-color $euiAnimSpeedFast ease-in,
    background-image $euiAnimSpeedFast ease-in,
    background-size $euiAnimSpeedFast ease-in;
}

@mixin euiFormControlFocusStyle($borderOnly: false) {
  background-color: tintOrShade($euiColorEmptyShade, 0%, 50%);
  background-image: euiFormControlGradient();
  background-size: 100%;

  @if ($borderOnly) {
    box-shadow: inset 0 0 0 1px transparentize($euiColorFullShade, .84);
  } @else {
    box-shadow:
      0 1px 1px -1px rgba($euiShadowColor, 0.2),
      0 4px 4px -2px rgba($euiShadowColor, 0.2),
      inset 0 0 0 1px transparentize($euiColorFullShade, .84);
  }
}

@mixin euiFormControlInvalidStyle() {
  background-image: euiFormControlGradient($euiColorDanger);
  background-size: 100%;
}

@mixin euiFormControlDisabledStyle() {
  cursor: not-allowed;
  color: $euiFormControlDisabledColor;
  background: $euiFormBackgroundDisabledColor;
  box-shadow: inset 0 0 0 1px $euiFormBorderDisabledColor;

  &::placeholder {
    color: $euiFormControlDisabledColor;
  }
}

@mixin euiFormControlReadOnlyStyle {
  cursor: default;
  background: transparent;
  border-color: transparent;
  box-shadow: none;
  padding-left: 0; // line up text with label
}

/**
 * 2. Override invalid state with focus state.
 */

@mixin euiFormControlStyle($borderOnly: false, $includeStates: true) {
  @include euiFormControlSize;
  @include euiFormControlDefaultShadow($borderOnly);

  border: none;
  font-size: $euiFontSizeS;
  font-family: $euiFontFamily;
  padding: $euiFormControlPadding;
  line-height: 1em; // fixes text alignment in IE
  color: $euiTextColor;
  border-radius: 0;

  &--fullWidth {
    max-width: 100%;
  }

  &--compressed {
    padding-top: $euiFormControlCompressedPadding;
    padding-bottom: $euiFormControlCompressedPadding;
    height: $euiFormControlCompressedHeight;
  }

  @if ($includeStates) {
    &:invalid { /* 2 */
      @include euiFormControlInvalidStyle;
    }

    &:focus { /* 2 */
      @include euiFormControlFocusStyle($borderOnly);
    }

    &:disabled {
      @include euiFormControlDisabledStyle;
    }

    &[readOnly] {
      @include euiFormControlReadOnlyStyle;
    }
  }

}

// Custom styles and states for checkboxes and radios

@mixin euiCustomControl($type: null, $size: $euiSize){

  @if $size {
    $size: $size - 2px; // subtract 2px from size to account for border size
    padding: $size/2;
  }

  border: 1px solid shadeOrTint($euiColorLightestShade, 18%, 30%);
  background: $euiColorEmptyShade no-repeat center;
  @include euiSlightShadow;

  @if $type == 'round' {
    border-radius: $size;
  } @else if $type == 'square' {
    border-radius: $euiBorderRadius;
  }

  transition: background-color $euiAnimSpeedFast ease-in,
              border-color $euiAnimSpeedFast ease-in,
              background-image 0s ease-out $euiAnimSpeedFast;
}

@mixin euiCustomControl--selected($type: null){
  border-color: $euiColorPrimary;
  background-color: $euiColorPrimary;

  @if $type != null {
    @include euiIconBackground($type, $euiColorEmptyShade);
  }
}

@mixin euiCustomControl--disabled($type: null){
  border-color: $euiColorLightShade;
  background-color: $euiColorLightShade;
  box-shadow: none;
  @if $type != null {
    @include euiIconBackground($type, $euiFormCustomControlDisabledIconColor);
  }
}

@mixin euiCustomControl--focused(){
  border-color: $euiColorPrimary;
  @include euiFocusRing;
}
