/*
 * 1. There's no way to target the layout of the extra input, so we must
 *    use the descendant selector to allow the width to shrink.
 * 2. Align extra input slightly better with slider labels, in an IE compliant way.
 * 3. Adjust vertical alignment of input based on extras
 */

.euiRange__wrapper {
  @include euiFormControlSize;
  display: flex;
  align-items: center;

  &--fullWidth {
    max-width: 100%;
  }

  &--disabled {
    .euiRange__minLabel,
    .euiRange__maxLabel,
    .euiRange__inputWrapper {
      opacity: .25;
    }
  }

  > .euiFormControlLayout { /* 1 */
    width: auto;
  }
}

.euiRange__inputWrapper {
  flex-grow: 1;
  position: relative; // for positioning ticks/levels
  align-self: flex-start; /* 3 */
}

.euiRange__minLabel,
.euiRange__maxLabel {
  font-size: $euiFontSizeXS;
}

.euiRange__minLabel {
  margin-right: $euiSizeS;
}

.euiRange__maxLabel {
  margin-left: $euiSizeS;
}

.euiRange__extraInput {
  width: auto;
  margin-left: $euiSize;
  position: relative; /* 2 */
  top: -2px; /* 2 */
}

.euiRange__tick {
  overflow-x: hidden;
  text-overflow: ellipsis;
  font-size: $euiFontSizeXS;
  position: relative;
  padding-top: $euiSize;

  &::before {
    @include size($euiSizeXS);

    content: '';
    background-color: $euiColorDarkShade;
    border-radius: 100%;
    position: absolute;
    top: 0;
    left: calc(50% - #{($euiSizeXS/2)});
  }

  &-isCustom {
    position: absolute;
    transform: translateX(-50%);
  }

  &:enabled:hover,
  &:focus,
  &--selected {
    color: $euiColorPrimary;
  }

  &--selected {
    font-weight: $euiFontWeightMedium;
  }

  &:disabled {
    cursor: not-allowed;
  }
}

.euiRange__levels {
  display: flex;
  justify-content: stretch;
  z-index: $euiZLevel0;
}

[class*='euiRange__level--'] {
  display: block;
  height: 6px;
  border-radius: 6px;
  margin: 2px;
}

// Modifier naming and colors.
$euiRangeLevelColors: (
  primary: $euiColorPrimary,
  success: $euiColorSuccess,
  warning: $euiColorWarning,
  danger: $euiColorDanger,
);

// Create level modifiers based upon the map.
@each $name, $color in $euiRangeLevelColors {
  .euiRange__level--#{$name} {
    background-color: transparentize($color, .7);
  }
}

.euiRange__range__progress {
  height: 4px;
  border-radius: 4px;
  background-color: $euiRangeTrackColor;
}

.euiRange__value {
  // Indentation for legibility in transition
  // sass-lint:disable-block indentation
  @include euiFontSizeS;
  border: 1px solid transparentize($euiColorDarkestShade, .8);
  position: absolute;
  border-radius: $euiBorderRadius;
  padding: ($euiSizeXS / 2) $euiSizeS;
  background-color: tintOrShade($euiColorFullShade, 25%, 90%);
  color: $euiColorGhost;
  max-width: 256px;
  z-index: $euiZLevel4;
  top: ($euiFormControlHeight / 2) - 1px;
  transition:
    box-shadow $euiAnimSpeedNormal $euiAnimSlightResistance,
    transform $euiAnimSpeedNormal $euiAnimSlightResistance;

  // Custom sizing
  $arrowSize: $euiSizeM;
  $arrowMinusSize: (($arrowSize / 2) - 1px) * -1;

  &::after,
  &::before {
    content: '';
    position: absolute;
    bottom: -$arrowSize / 2;
    left: 50%;
    transform-origin: center;
    background-color: tintOrShade($euiColorFullShade, 25%, 90%);
    width: $arrowSize;
    height: $arrowSize;
    border-radius: 2px;
  }

  &::before {
    background-color: transparentize($euiColorDarkestShade, .8);
  }

  // Positions the arrow
  &.euiRange__value--right {
    transform: translateX(0) translateY(-50%);
    margin-left: $euiSizeL;

    &:before,
    &:after {
      bottom: 50%;
      left: $arrowMinusSize;
      transform: translateY(50%) rotateZ(45deg);
    }

    &::before {
      margin-left: -1px;
    }
  }

  &.euiRange__value--left {
    transform: translateX(-100%) translateY(-50%);
    margin-left: -$euiSizeL;

    &:before,
    &:after {
      bottom: 50%;
      left: auto;
      right: $arrowMinusSize;
      transform: translateY(50%) rotateZ(45deg);
    }

    &::before {
      margin-right: -1px;
    }
  }
}


/*
 *  Positioning
 */

.euiRange__wrapper--hasLevels {
  .euiRange__levels {
    position: absolute;
    left: 0;
    right: 0;
    top: ($euiFormControlHeight / 2) + 2px;
  }
}

.euiRange__wrapper--hasRange {
  .euiRange__range {
    position: absolute;
    left: 0;
    width: 100%;
    top: ($euiFormControlHeight / 2) - 2px;
    z-index: $euiZLevel0;
    overflow: hidden;
  }
}

.euiRange__wrapper--hasTicks {
  .euiRange {
    height: $euiFormControlHeight / 2; /* 3 */
  }

  .euiRange__levels {
    top: ($euiFormControlHeight / 4) + 2px;
  }

  .euiRange__range {
    top: ($euiFormControlHeight / 4) - 2px;
    left: 0;
  }

  .euiRange__value {
    top: ($euiFormControlHeight / 4) - 1px;
  }

  .euiRange__extraInput {
    margin-top: 0;
  }

  .euiRange__ticks {
    position: absolute;
    left: ($euiRangeThumbWidth / 2);
    right: ($euiRangeThumbWidth / 2);
    top: $euiSizeS;
    display: flex;
    z-index: $euiZLevel1;
  }
}

.euiRange__valueWrapper {
  // Keeps tooltip (value) aligned to percentage of actual slider
  display: block;
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: calc(100% - #{$euiRangeThumbWidth});
  margin-left: $euiRangeThumbWidth / 2;
}

/*
 *  Input Range Customization by browser
 */

// The following code is inspired by...

// Github: https://github.com/darlanrod/input-range-sass
// Author: Darlan Rod https://github.com/darlanrod
// Version 1.4.1
// MIT License

// It has been modified to fit the styling patterns of Kibana and
// to be more easily maintained / themeable going forward.

.euiRange {
  // Auto means the height isn't defined
  height: $euiFormControlHeight;
  appearance: none;
  background: transparent; // Otherwise white in Chrome
  width: 100%; // ensures the slider expands to fill flex display
  position: relative;
  z-index: $euiZLevel2; // stay above tick marks
  cursor: pointer; // Keep cursor to full range bounds

  &:disabled {
    cursor: not-allowed;

    // sass-lint:disable-block mixins-before-declarations
    @include euiRangeThumbPerBrowser {
      cursor: not-allowed;
      border-color: $euiRangeThumbBorderColor;
      background-color: $euiRangeThumbBorderColor;
      box-shadow: none;
    }
  }

  &:focus {
    @include euiRangeThumbPerBrowser {
      @include euiCustomControlFocused;
    }

    @include euiRangeTrackPerBrowser {
      background-color: $euiColorPrimary;
      border-color: $euiColorPrimary;
    }

    ~ .euiRange__range .euiRange__range__progress {
      background-color: $euiColorPrimary;
    }

    ~ .euiRange__valueWrapper .euiRange__value {
      @include euiBottomShadowMedium;

      &.euiRange__value--right {
        transform: translateX(0) translateY(-50%) scale(1.1);
      }

      &.euiRange__value--left {
        transform: translateX(-100%) translateY(-50%) scale(1.1);
      }
    }
  }

  @include euiRangeThumbPerBrowser {
    @include euiCustomControl($type: 'round');

    cursor: pointer;
    border-color: $euiRangeThumbBorderColor;
    padding: 0;
    height: $euiRangeThumbHeight;
    width: $euiRangeThumbWidth;
  }

  @include euiRangeTrackPerBrowser {
    @include euiRangeTrackSize;

    background: $euiRangeTrackColor;
    border: $euiRangeTrackBorderWidth solid $euiRangeTrackBorderColor;
    border-radius: $euiRangeTrackRadius;
  }

  // Resets

  // Disable linter for these very unique vendor controls
  // sass-lint:disable-block no-vendor-prefixes
  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    margin-top: ((-$euiRangeTrackBorderWidth * 2 + $euiRangeTrackHeight) / 2) - ($euiRangeThumbHeight / 2);
  }

  &::-ms-thumb {
    margin-top: 0;
  }

  &::-ms-track {
    @include euiRangeTrackSize;

    background: transparent;
    border-color: transparent;
    border-width: ($euiRangeThumbHeight / 2) 0;
    color: transparent;
  }
}

.euiRange__wrapper--hasRange .euiRange,
.euiRange__wrapper--hasTicks .euiRange {
  @include euiRangeTrackPerBrowser {
    background-color: transparentize($euiRangeTrackColor, .6);
    border-color: transparentize($euiRangeTrackBorderColor, .6);
  }
}
