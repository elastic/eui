@mixin euiButton {
  @include euiFont;

  display: inline-block;
  appearance: none;
  cursor: pointer;
  height: $euiButtonHeight;
  line-height: $euiButtonHeight; // prevents descenders from getting cut off
  text-decoration: none;
  border: solid 1px transparent;
  text-align: center;
  transition: all $euiAnimSpeedNormal $euiAnimSlightBounce;
  white-space: nowrap;
  max-width: 100%;
  vertical-align: middle;

  &:hover:not(:disabled) {
    transform: translateY(-1px);
  }

  &:hover:not(:disabled),
  &:focus {
    text-decoration: underline;
  }

  &:focus {
    animation: euiButtonActive $euiAnimSpeedNormal $euiAnimSlightBounce;
  }

  &:active:not(:disabled) {
    transform: translateY(1px);
  }
}

/**
 * 1. Apply margin to all but last item in the flex.
 * 2. Margin gets flipped because of the row-reverse.
 */
@mixin euiButtonContent($isReverse: false) {
  height: 100%;
  width: 100%;
  vertical-align: middle;

  .euiButton__icon,
  .euiButton__spinner {
    flex-shrink: 0; // Ensures the icons/spinner don't scale down below their intended size
  }

  @if ($isReverse) {
    flex-direction: row-reverse;

    > * + * {
      margin-left: 0; /* 1 */
      margin-right: $euiSizeS; /* 1 */
    }
  } @else {
    display: flex;
    justify-content: center;
    align-items: center;

    > * + * {
      margin-left: $euiSizeS; /* 1 */
    }
  }
}

@keyframes euiButtonActive {
  50% {
    transform: translateY(1px);
  }
}

// BUTTON TOGGLES
// Pointer events and interactions are handled by the input (checkbox/radio)
// and not the button, this mixin helps to target that element for states
@mixin euiButtonToggleStates {
  @at-root {
    .euiButtonToggle__input:enabled:hover + #{&},
    .euiButtonToggle__input:enabled:focus + #{&},
    .euiButtonToggle__input:enabled:active + #{&} {
      @content;
    }
  }
}
