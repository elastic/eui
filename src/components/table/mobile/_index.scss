@import '../../panel/index';

@include screenXSmall(){

  .euiTable {
    @include euiFontSize;

    thead {
      display: none; // Use mobile versions of selecting and filtering instead
    }
  }

  .euiTableHeaderMobile {
    display: flex;
    justify-content: flex-end;
    padding: $euiTableCellContentPadding 0;
  }

  .euiTableSortMobile {
    display: block;

    .euiTableSortMobileItem--hideForMobile {
      display: none;
    }
  }

  // Not allowing compressed styles in mobile view (for now)
  // .euiTable--compressed {
  //   .euiTableRowCellCheckbox::before,
  //   .euiTableRowCell::before {
  //     padding: $euiSizeXS;
  //     padding-bottom: 0;
  //     margin-bottom: -$euiSizeXS;
  //   }
  // }

  // Make each row a Panel
  @include euiPanel($selector: 'euiTableRow');

  .euiTableRow {
    display: flex;
    flex-wrap: wrap;
    padding: $euiTableCellContentPadding;
    margin-bottom: $euiTableCellContentPadding;

    &:hover {
      background-color: transparent;
    }

    &.euiTableRow-isSelectable {
      @include euiTableActionsBackground--mobile;

      padding-left: $euiTableCellCheckboxWidth + $euiTableCellContentPadding;
      position: relative;

      .euiTableRowCellCheckbox {
        position: absolute;
        right: $euiTableCellContentPadding/2;
        top: $euiTableCellContentPadding + (($euiTableCellContentPadding*$euiLineHeight)-$euiTableCellContentPadding); // same as row padding-top + cell padding + 1/2 line height
      }
    }

    // override hover & selected colors
    &.euiTableRow-isSelected {
      &:hover,
      + .euiTableRow.euiTableRow-isExpandedRow,
      &:hover + .euiTableRow.euiTableRow-isExpandedRow .euiTableRowCell {
        background-color: $euiTableSelectedColor;
      }
    }

    &.euiTableRow-isExpandable,
    &.euiTableRow-hasActions {
      //@include euiTableSelectionBackground--mobile;

      padding-right: $euiSizeXXL;
      position: relative;

      .euiTableRowCell--isExpander,
      .euiTableRowCell--hasActions {
        min-width: 0;
        width: $euiSizeL;
        position: absolute;
        left: $euiTableCellContentPadding;
        top: $euiTableCellContentPadding + (($euiTableCellContentPadding*$euiLineHeight)-$euiTableCellContentPadding); // same as row padding-top + cell padding + 1/2 line height

        &::before {
          display: none;
        }

        .euiTableCellContent {
          padding: 0;

          > * {
            opacity: 1 !important; // always show actions on mobile (may need to move to js)
          }

          .euiLink {
            padding: $euiSizeXS;
          }
        }
      }
    }

    &.euiTableRow-isExpandable {
      &.euiTableRow-hasActions {
        .euiTableRowCell--hasActions {
          left: auto;
          right: $euiTableCellContentPadding;
          top: auto;
          bottom: $euiSize; // same as row padding-bottom
        }
      }
    }

    &.euiTableRow-isExpandedRow {
      @include euiTableActionsBackground--mobile;
      @include euiBottomShadowMedium;
      margin-top: -$euiTableCellContentPadding*2;
      position: relative;
      z-index: 2; // on top of it's parent/previous row
      border-top: none;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
      padding-left: $euiSizeS; // override selectable as the padding is already applied via the contents

      &:hover {
        background-color: $euiColorEmptyShade; // keep white background to cover triggering row's border
      }

      .euiTableRowCell {
        width: calc(100% - #{$euiTableActionsAreaWidth});

        &::before {
          display: none;
        }
      }
    }
  }

  .euiTableRowCell {
    min-width: 50%;
    border: none;

    // Prepend the data attribute "data-header" to each cell
    &::before {
      content: attr(data-header);
      display: block;
      @include fontSize($euiFontSize * .6875);
      color: $euiColorDarkShade;
      padding: $euiSizeS;
      padding-bottom: 0;
      margin-bottom: -$euiSizeS; // pull up cell content closer

      min-height: 26px;

      // Always truncate
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    &.euiTableRowCell--hideForMobile {
      display: none;
    }

    &.euiTableRowCell--isMobileHeader {
      display: block;
      width: 100%;

      &::before {
        display: none; // don't display the header prop
      }
    }

    &.euiTableRowCell--isMobileFullWidth {
      width: 100%;

      .euiTableCellContent--alignCenter {
        justify-content: center;
        text-align: center;
      }
    }
  }

  .euiTableRowCellCheckbox {
    border: none;
  }


  // force all content back to left side
  .euiTableCellContent--alignRight {
    justify-content: flex-start;
  }

  .euiTableCellContent--alignCenter {
    justify-content: flex-start;
  }
}
