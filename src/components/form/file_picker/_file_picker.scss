@import '../form_control_layout/mixins';

.euiFilePicker {
  .euiFilePicker__wrap {
    // Auto means the height isn't set to a fixed size
    @include euiFormControlSize(auto);

    position: relative;
    display: inline-block;

    @at-root {
      .euiFilePicker--compressed#{&} {
        height: $euiSizeXL;
      }
    }
  }

  // The input is an invisiable dropzone / button
  .euiFilePicker__input {
    position: absolute;
    z-index: 0;
    left: 0;
    top: 0;
  	width: 100%;
  	height: 100%;
  	opacity: 0;
  	overflow: hidden;

    &:hover {
      cursor: pointer;
    }
    &:hover:disabled {
      cursor: not-allowed;
    }
    &:disabled ~ .euiFilePicker__prompt {
      color: $euiColorMediumShade;
    }
  }

  .euiFilePicker__icon {
    margin-bottom: $euiSize;
    transition: transform $euiAnimSpeedFast $euiAnimSlightResistance;

    @at-root {
      .euiFilePicker--compressed#{&} {
        position: absolute;
        top: $euiSizeS;
        left: $euiSizeM;
        transform: scale(1) !important; // don't scale icon on hover
      }
    }
  }

  /**
   * 1. Don't block the user from dropping files onto the filepicker.
   * 2. Put prompt on top of input, so the clear button can intercept the click.
   * 3. Ensure space for import icon and clear button (only if it has files)
   */
  .euiFilePicker__prompt {
    @include euiFormControlDefaultShadow;

    pointer-events: none; /* 1 */
    position: relative; /* 2 */
    z-index: 1; /* 2 */
    display: block;
    background: $euiColorLightestShade;
    padding: $euiSizeL;
    //border-radius: $euiBorderRadius / 2;
    background: $euiFormBackgroundColor;
    text-align: center;
    transition:
      box-shadow $euiAnimSpeedNormal ease-in, background $euiAnimSpeedNormal ease-in,
      background-color $euiAnimSpeedSlow ease-in,
      border-color $euiAnimSpeedSlow ease-in,
      color $euiAnimSpeedSlow ease-in;

    @at-root {
      .euiFilePicker--compressed#{&} {
        padding: $euiSizeS $euiSize $euiSizeS $euiSizeXXL; /* 3 */
        text-align: left;
        height: $euiSizeXL;
      }
    }
  }

  .euiFilePicker__promptText {
    @include euiFontSizeS;
    display: block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;

    @at-root {
      // make compressed prompt look like placeholder
      .euiFilePicker--compressed#{&} {
        color: $euiColorMediumShade;
        line-height: $euiSize;
      }
    }
  }

  /**
   * 1. Undo the pointer-events: none applied to the enclosing prompt.
   */
  .euiFilePicker__clearButton {
    pointer-events: auto; /* 1 */

    @at-root {
      .euiFilePicker--compressed#{&} {
        position: absolute;
        top: $euiSizeM/2;
        right: $euiSizeM;
        @include euiFormControlLayout__clear('.euiFilePicker__clearIcon');
      }
    }
  }

  // Hover and focus
  .euiFilePicker__input:hover:not(:disabled) + .euiFilePicker__prompt,
  .euiFilePicker__input:focus + .euiFilePicker__prompt {
    text-decoration: underline;

    .euiFilePicker__icon {
      transform: scale(1.1);
    }
  }

  // Focus
  .euiFilePicker__input:focus + .euiFilePicker__prompt {
    @include euiFormControlFocusStyle;
  }

  // Disabled
  .euiFilePicker__input:disabled + .euiFilePicker__prompt {
    @include euiFormControlDisabledStyle;
  }

  &.euiFilePicker-hasFiles.euiFilePicker--compressed .euiFilePicker__prompt {
    padding-right: $euiSizeXXL; /* 3 */
  }

  // When the filepicker has files in it, but not in compressed mode
  &:not(.euiFilePicker--compressed).euiFilePicker-hasFiles .euiFilePicker__promptText {
    font-weight: $euiFontWeightBold;
  }

  // When the filepicker has files in it, AND in compressed mode
  &.euiFilePicker--compressed.euiFilePicker-hasFiles .euiFilePicker__promptText {
    color: $euiTextColor;
  }

  // When you are dragging files over the dropzone
  &.euiFilePicker__showDrop .euiFilePicker__prompt {
    @include euiFormControlFocusStyle;

    .euiFilePicker__promptText {
      text-decoration: underline;
    }

    .euiFilePicker__icon {
      transform: scale(1.1);
      color: $euiColorPrimary;
    }
  }
}
