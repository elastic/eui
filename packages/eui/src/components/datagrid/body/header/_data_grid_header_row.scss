.euiDataGridHeader {
  display: flex;
  z-index: $euiZDataGridCellPopover - 1; // Needs to sit above the content and focused cells
  background: $euiColorEmptyShade;
  position: sticky;
  top: 0;
  width: fit-content;
}

@include euiDataGridHeaderCell {
  @include euiFontSizeS;

  position: relative;
  display: flex;
  flex: 0 0 auto;
  align-items: center;
  padding: $euiDataGridCellPaddingM;
  font-weight: $euiFontWeightBold;

  // Workaround for focus trap
  & > [data-focus-lock-disabled] {
    display: flex;
    align-items: center;
    gap: $euiSizeXS;
    width: 100%;
  }

  &:focus,
  &--hasColumnActions:focus-within,
  &--isActionsPopoverOpen {
    @include euiDataGridCellFocus;
  }

  // needed to override global style
  &:focus:focus-visible {
    outline: none;
  }

  .euiDataGridHeaderCell__content {
    flex-grow: 1; // ensures content stretches and allows for manual layout styles to apply
  }

  // We only truncate if the cell is not a control column.
  &:not(.euiDataGridHeaderCell--controlColumn) {
    .euiDataGridHeaderCell__button {
      position: relative;
      display: flex;
      align-items: center;
      gap: $euiSizeXS;
      width: 100%;
      border-radius: $euiBorderRadiusSmall;
      font-weight: $euiFontWeightBold;
      outline: none;

      &:focus-visible {
        outline: none;
      }
    }

    [data-focus-lock-disabled='false'] .euiDataGridHeaderCell__button {
      @include euiFocusRing;
      color: $euiFocusRingColor;
    }

    .euiDataGridHeaderCell__content {
      @include euiTextTruncate;

      text-align: left; // overwrites inherited 'center' styles from button
    }

    .euiDataGridHeaderCell__sortingArrow {
      flex: 0 0 auto; // Ensure icon doesn't shrink
    }

    .euiDataGridHeaderCell__icon {
      flex: 0 0 auto; // Ensure icon doesn't shrink
      margin-left: auto; // Aligns the icon to the right
      // Center the icon
      display: flex;
      align-items: center;
      justify-content: center;
      width: 0;
      height: $euiSize;
      overflow: hidden;
      opacity: 0;
      transition: width $euiAnimSpeedFast ease-in, opacity $euiAnimSpeedSlow ease-in;
    }

    &:focus-within,
    &:hover,
    .euiPopover-isOpen {
      .euiDataGridHeaderCell__button {
        padding: $euiSizeXS;
        // balance out additional button target size in header height, prevents increased header cell height
        margin-block: -$euiSizeXS;
      }

      .euiDataGridHeaderCell__icon {
        width: $euiSize;
        opacity: 1;
      }
    }
  }

  // Align numeric and currency schemas to the right
  &.euiDataGridHeaderCell--numeric,
  &.euiDataGridHeaderCell--currency {
    .euiDataGridHeaderCell__content {
      text-align: right;
    }
  }
}

.euiDataGridHeader__action--selected {
  // stylelint-disable-next-line declaration-no-important
  font-weight: $euiFontWeightBold !important;
}

// Header alternates
// Often these need extra specificity because they need to gracefully clash with the border settings

@include euiDataGridStyles(bordersNone, bordersHorizontal) {
  .euiDataGridHeader {
    background: $euiColorEmptyShade;
  }
}

@include euiDataGridStyles(headerUnderline) {
  @include euiDataGridHeaderCell {
    border-top: none;
    border-left: none;
    border-right: none;
    border-bottom: $euiBorderThick;
    border-bottom-color: $euiTextColor;
  }
}

@include euiDataGridStyles(bordersNone, headerUnderline) {
  @include euiDataGridHeaderCell {
    border-bottom: $euiBorderThick;
    border-color: $euiTextColor;
  }
}

@include euiDataGridStyles(headerShade) {
  @include euiDataGridHeaderCell {
    background: tintOrShade($euiColorLightestShade, 0%, 10%);
  }
}

@include euiDataGridStyles(headerShade, bordersAll) {
  @include euiDataGridHeaderCell {
    border-right: $euiBorderThin;
    border-bottom: $euiBorderThin;
    border-left: none;

    &:first-of-type {
      border-left: $euiBorderThin;
    }
  }
}

@include euiDataGridStyles(headerShade, bordersHorizontal) {
  @include euiDataGridHeaderCell {
    border-top: none;
    border-bottom: $euiBorderThin;
  }
}

// Border alternates
@include euiDataGridStyles(bordersNone) {
  @include euiDataGridHeaderCell {
    border: none;
  }
}

@include euiDataGridStyles(borderhorizontal) {
  @include euiDataGridHeaderCell {
    border-top: none;
    border-right: none;
    border-left: none;
  }
}

// Font alternates
@include euiDataGridStyles(fontSizeSmall) {
  @include euiDataGridHeaderCell {
    @include euiFontSizeXS;
  }
}

@include euiDataGridStyles(fontSizeLarge) {
  @include euiDataGridHeaderCell {
    @include euiFontSize;
  }
}

// Padding alternates
@include euiDataGridStyles(paddingSmall) {
  @include euiDataGridHeaderCell {
    padding: $euiDataGridCellPaddingS;
  }
}

@include euiDataGridStyles(paddingLarge) {
  @include euiDataGridHeaderCell {
    padding: $euiDataGridCellPaddingL;
  }
}

@include euiDataGridStyles(noControls, bordersAll) {
  @include euiDataGridHeaderCell {
    border-top: $euiBorderThin;
  }
}

@include euiDataGridStyles(noControls, bordersHorizontal) {
  @include euiDataGridHeaderCell {
    border-top: $euiBorderThin;
  }
}
