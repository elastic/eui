@import '../../panel/index';

@include screenXSmall(){

  .euiTable {
    @include euiFontSize;
    thead { display: none; }
  }

  .euiTableHeaderMobile {
    display: flex;
    justify-content: flex-end;
  }

  .euiTableSortMobile {
    display: block;

    .euiTableSortMobileItem--hideForMobile {
      display: none;
    }
  }

  .euiTable--compressed {
    .euiTableRowCellCheckbox::before,
    .euiTableRowCell::before {
      padding: $euiSizeXS;
      padding-bottom: 0;
      margin-bottom: -$euiSizeXS;
    }
  }

  .euiTableHeaderCell {
    &.euiTableHeaderCell--isMobileHeader {
    }

    &.euiTableHeaderCell--hideForMobile {
      display: none;
    }
  }

  .euiTableHeaderCellCheckbox {
  }

  .euiTableHeaderButton {
  }

  @include euiPanel($selector: 'euiTableRow');

  .euiTableRow {
    display: flex;
    flex-wrap: wrap;
    padding: $euiSizeS $euiSize;
    margin-bottom: $euiSize;

    &.euiTableRow-isSelectable {
      padding-left: $euiSizeXXL;
      position: relative;

      .euiTableRowCellCheckbox {
        position: absolute;
        left: $euiSize;
        top: $euiSizeL + (($euiSize*$euiLineHeight)-$euiSize)/2; // same as row padding-top + cell padding + 1/2 line height
      }
    }

    &.euiTableRow-isSelected {
    }

    &.euiTableRow-hasActions {
      padding-right: $euiSizeXXL;
      position: relative;

      .euiTableRowCell--hasActions {
        min-width: 0;
        width: $euiSize;
        position: absolute;
        right: $euiSize;
        top: $euiSize + (($euiSize*$euiLineHeight)-$euiSize)/2 + 4px; // same as row padding-top + 1/2 line height

        &::before {
          display: none;
        }

        .euiTableCellContent {
          padding: 0;
        }
      }
    }

    &[aria-owns] {
      padding-right: $euiSizeXXL;
      position: relative;

      &.euiTableRow-hasActions {
        padding-right: $euiSizeXXL + $euiSizeL;

        .euiTableRowCell--hasActions {
          right: $euiSizeL + $euiSize;
        }
      }

      &:hover {
        background: none;
      }

      .euiTableRowCell--isExpander {
        min-width: 0;
        width: $euiSize;
        position: absolute;
        right: $euiSize;
        top: $euiSize + (($euiSize*$euiLineHeight)-$euiSize)/2 + 4px; // same as row padding-top + 1/2 line height

        &::before {
          display: none;
        }

        .euiTableCellContent {
          padding: 0;
        }
      }
    }

    &.euiTableRow-isExpandedRow {
      margin-top: -$euiSize*2;
      position: relative;
      z-index: 2; // on top of it's parent/previous row
      border-top: none;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
      padding-left: $euiSize; // override selectable as the padding is already applied via the contents

      &:hover {
        background: none;
      }

      .euiTableRowCell {
        width: 100%;

        &::before {
          display: none;
        }
      }
    }
  }

  .euiTableRowCell {
    min-width: 50%;
    border: none;

    // Prepend the data attribute "data-header" to each cell
    &::before {
      content: attr(data-header);
      display: block;
      @include fontSize($euiFontSize * .6875);
      color: $euiColorDarkShade;
      padding: $euiSizeS;
      padding-bottom: 0;
      margin-bottom: -$euiSizeS; // pull up cell content closer

      min-height: 26px;

      // Always truncate
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    &.euiTableRowCell--hideForMobile {
      display: none;
    }

    &.euiTableRowCell--isMobileHeader {
      display: block;
      width: 100%;

      &::before {
        display: none; // don't display the header prop
      }
    }

    &.euiTableRowCell--isMobileFullWidth {
      width: 100%;
    }
  }

  .euiTableRowCellCheckbox {
    border: none;

    .euiTableCellContent {
      padding: 0;
    }
  }

  .euiTableCellContent {
  }

    .euiTableCellContent__text {
    }

  .euiTableCellContent--alignRight {
    justify-content: flex-start;
  }

  .euiTableCellContent--alignCenter {
    justify-content: flex-start;
  }

  .euiTableCellContent--truncateText {

    .euiTableCellContent__text {
    }
  }

  .euiTableCellContent--overflowingContent {
    .euiTableCellContent__text {
    }
  }
}
