.euiToken {
  display: inline-flex;
  align-items: center;
  justify-content: center;

  svg {
    // width: 100%;
    height: 100%;
    margin: auto;
  }
}

.euiToken--circle {
  border-radius: 50%;
}

.euiToken--square {
  // These are pretty small elements, the standard size
  // is just slightly too large.
  border-radius: $euiBorderRadius - 1px;
}

.euiToken--xsmall {
  width: $euiSizeM;
  height: $euiSizeM;

  svg {
    max-width: $euiSizeS + 2px;
  }

  &.euiToken--rectangle {
    padding: 0 $euiSizeXS;
  }
}

.euiToken--small {
  width: $euiSize;
  height: $euiSize;

  &.euiToken--rectangle {
    padding: 0 $euiSizeXS;
  }
}

.euiToken--medium {
  width: $euiSizeL;
  height: $euiSizeL;

  &.euiToken--rectangle {
    padding: 0 $euiSizeS;
  }
}

.euiToken--large {
  width: $euiSizeXL;
  height: $euiSizeXL;

  &.euiToken--rectangle {
    padding: 0 ($euiSize * .5);
  }
}

.euiToken--rectangle {
  box-sizing: content-box;
}

@each $tintName, $tintValue in $euiTokenTypes {
  .euiToken--#{$tintName} {
    // Check to make to see if it exists in the allowed color blind palette
    $index: index($euiPaletteColorBlindKeys, $tintValue);
    $color: $tintValue;

    @if ( $index ) {
      $color: map-get(map-get($euiPaletteColorBlind, $tintValue), 'graphic');
      @include euiTokenCreateLightStyle($color);

      $color: map-get(map-get($euiPaletteColorBlind, $tintValue), 'behindText');
      @include euiTokenCreateDarkStyle($color);
    } @else {
      @include euiTokenCreateLightStyle($color);
      @include euiTokenCreateDarkStyle($color);
    }
  }
}
