#!/usr/bin/env bash

set -e
set +x

# Two stage script: first it compiles using Node Docker container, then it runs
# itself from within another docker container to deploy to GCP.

# Usage:
# * Compile and deploy:          ./scripts/deploy/deploy_docs
# * Deploy only without docker:  ./scripts/deploy/deploy_docs nodocker

# Expected env variables:
# * GPROJECT - GCE project name, e.g. elastic-bekitzur
# * GCE_ACCOUNT - credentials for the google service account (JSON blob)
# * GIT_BRANCH - current Git branch or tag (e.g. "refs/heads/main", "v18.2.1")
# * GIT_PULL_REQUEST_ID - current Git PR (Ex. 6999) from Buildkite env
# * BUILDKITE_CI - Buildkite CI agent
# * JENINKS_CI - Jenkins CI agent

# Docker images
GCE_IMAGE=google/cloud-sdk:slim

# ==================================================
# TODO: Remove echo tests
# These TODO items will be removed when EUI PR #6967
# and EUI PR #6965 are merged successfully.
# ==================================================
echo "The Jenkins PR number is: ${pull_request_id}."
echo "The Buildkite PR number is: ${GIT_PULL_REQUEST_ID}."

if [[ -z "${GPROJECT}" ]]; then
    echo "GPROJECT is not set, e.g. 'GPROJECT=elastic-bekitzur'"
    exit 1
fi
if [[ -z "${GCE_ACCOUNT}" ]]; then
  echo "GCE_ACCOUNT is not set. Expected Google service account JSON blob."
  exit 1
fi
if [[ -z "${GIT_BRANCH}" ]]; then
  echo "GIT_BRANCH is not set, e.g. 'GIT_BRANCH=refs/heads/main'"
  exit 1
fi

post_comment_to_gh()
{
  if [[ -z "${GITHUB_TOKEN}" ]]; then
    echo "Warning: GITHUB_TOKEN is not set; cannot publish PR docs preview URL to Github."
  else
    # ==================================================
    # TODO: Remove Jenkins block and Buildkite
    # if; then / fi block
    # ==================================================
    if [[ ! -z "${pull_request_id}" ]]; then
      printf '\nAdding comment to GitHub Pull Request: %i\n' "$pull_request_id"
      comment="Preview documentation changes for this PR: https://eui.elastic.co/pr_$pull_request_id/"

      set +x
      curl \
        --silent \
        --location \
        --header "Authorization: token ${GITHUB_TOKEN}" \
        --request POST \
        --data "$(jq --null-input --arg comment "$comment" '{ body: $comment }')" \
        "https://api.github.com/repos/elastic/eui/issues/${pull_request_id}/comments"
    fi

    # ==================================================
    # Buildkite block
    # ==================================================
    if [[ ! -z "${GIT_PULL_REQUEST_ID}" ]]; then
      printf '\nAdding comment to GitHub Pull Request: %i\n' "$GIT_PULL_REQUEST_ID"
      comment="Preview documentation changes for this PR: https://eui.elastic.co/pr_${GIT_PULL_REQUEST_ID}_buildkite/"

      set +x
      curl \
        --silent \
        --location \
        --header "Authorization: token ${GITHUB_TOKEN}" \
        --request POST \
        --data "$(jq --null-input --arg comment "$comment" '{ body: $comment }')" \
        "https://api.github.com/repos/elastic/eui/issues/${GIT_PULL_REQUEST_ID}/comments"
    fi
  fi
}

publish_to_bucket()
{
  echo "Copying $PWD/docs/* to $full_bucket_path"
  gsutil -m \
    -h "Cache-Control:public, max-age=$max_age, must-revalidate" \
    cp \
    -r \
    -a public-read \
    -z js,css,html \
    "$PWD/docs/*" "$full_bucket_path"
}

if [[ "$1" != "nodocker" ]]; then
  ./scripts/deploy/build_docs

  # Get the latest tag on main, which will determine whether we deploy to the root `eui.elastic.co` bucket
  # NOTE: specifying the main branch means we don't override prod with backport or prerelease tags.
  CURRENT_RELEASE=$(git describe --tags "$(git rev-list --branches=main --tags --max-count=1)")
  echo "Current release: $CURRENT_RELEASE"

  # Run this script from inside the docker container, using google/cloud-sdk image
  # ==================================================
  # TODO: Remove --env pull_request_id
  # ==================================================
  echo "Deploying to bucket using ${GCE_IMAGE} Docker image"
  docker run \
    -i --rm \
    --env GCE_ACCOUNT \
    --env GIT_BRANCH \
    --env GPROJECT \
    --env pull_request_id \
    --env GIT_PULL_REQUEST_ID \
    --env JENKINS_CI \
    --env BUILDKITE_CI \
    --env CURRENT_RELEASE="$CURRENT_RELEASE" \
    --env HOME=/tmp \
    --user="$(id -u):$(id -g)" \
    --volume "$PWD":/app:ro \
    --workdir /app \
    "$GCE_IMAGE" \
    /app/scripts/deploy/deploy_docs nodocker "$@"
  unset GCE_ACCOUNT

  # ==================================================
  # TODO - Remove pull_request_id logical block
  # 
  # Buildkite treats pull requests as either "false"
  # or a number string like "1234". Jenkins prefers
  # an empty string, which is the rationale for the
  # extra Buildkite logic.
  #
  # https://buildkite.com/docs/pipelines/environment-variables#BUILDKITE_PULL_REQUEST
  # ==================================================
  if [[ ! -z "${pull_request_id}" ]] || { [[ ! -z "${GIT_PULL_REQUEST_ID}" ]] && [[ "${GIT_PULL_REQUEST_ID}" != "false" ]]; }; then
    post_comment_to_gh
  fi
  unset GITHUB_TOKEN
else
  # Copying files to the bucket
  # Login to the cloud with the service account
  gcloud auth activate-service-account --key-file <(echo "$GCE_ACCOUNT")
  unset GCE_ACCOUNT

  # All branches go into correspondingly named dirs.
  # remove remote "origin/", leaving just the branch name
  BRANCH="${GIT_BRANCH#*/}"

  # Copy files
  EUI_DOCS_PROJECT=eui-docs-live
  BUCKET=${GPROJECT}-${EUI_DOCS_PROJECT}

  max_age="1800"

  # ==================================================
  # TODO: Remove Jenkins block
  # ==================================================
  if [[ ! -z "${JENKINS_CI}" ]]; then
    echo "Jenkins CI agent".

    if [[ ! -z "${pull_request_id}" ]]; then
      echo "This is the Jenkins PR release."
      full_bucket_path="gs://$BUCKET/pr_$pull_request_id/"
      publish_to_bucket
    else
      echo "This is a Jenkins branch release."
      full_bucket_path="gs://$BUCKET/$BRANCH/"
      max_age="1800" # Reducing to 15 minutes to limit stale docs
      publish_to_bucket

      # If this is the highest release number to date, publish to root directory
      if [[ "$CURRENT_RELEASE" == "$GIT_BRANCH" ]]; then
        echo "This is the current Jenkins release."
        full_bucket_path="gs://$BUCKET/"
        publish_to_bucket
      fi
    fi
  fi

  # ==================================================
  # Buildkite block
  # ==================================================
  if [[ ! -z "${BUILDKITE_CI}" ]]; then
    echo "Buildkite CI agent."

    # If GIT_PULL_REQUEST_ID length is not 0 and string is not "false"
    if [[ ! -z "${GIT_PULL_REQUEST_ID}" ]] && [[ "${GIT_PULL_REQUEST_ID}" != "false" ]]; then
      full_bucket_path="gs://$BUCKET/pr_${GIT_PULL_REQUEST_ID}_buildkite/"
      publish_to_bucket

    # Our branched docs deploys are **only** ever triggered by tags
    # https://buildkite.com/docs/pipelines/environment-variables#BUILDKITE_TAG
    elif [[ ! -z "${BUILDKITE_TAG}" ]]; then
      full_bucket_path="gs://$BUCKET/${BUILDKITE_TAG}/"
      max_age="1800" # Reducing to 15 minutes to limit stale docs
      publish_to_bucket

      # If this is the highest release number to date, publish to root directory
      if [[ "$CURRENT_RELEASE" == "$BUILDKITE_TAG" ]]; then
        full_bucket_path="gs://${BUCKET}/"
        publish_to_bucket
      fi

    # Let users know neither job ran
    else
      echo "This is neither a pull request nor a tag release. No docs were deployed."
    fi
  fi
fi
