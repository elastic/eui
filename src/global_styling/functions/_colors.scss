// Mixes a provided color with white.
@function tint($color, $percent) {
  @return mix(#fff, $color, $percent);
}

// Mixes a provided color with black.
@function shade($color, $percent) {
  @return mix(#000, $color, $percent);
}

// For theming. Checks the text color and tells us whether it's light or dark.
// Based on that we either tint (add white) or shade (add black).
@function tintOrShade($color, $tint, $shade) {
  @if (lightness($euiTextColor) > 50) {
    @return shade($color, $shade);
  } @else {
    @return tint($color, $tint);
  }
}

// The reverse of the above
@function shadeOrTint($color, $shade, $tint) {
  @if (lightness($euiTextColor) < 50) {
    @return shade($color, $shade);
  } @else {
    @return tint($color, $tint);
  }
}

// Calculates luminance, which is better than brightness for checking colors
// pow, nth functions come from the _math.scss functions
@function luminance($color) {
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();

  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;

    $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));

    $rgba2: append($rgba2, $rgb);
  }

  @return .2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

// Calculate contrast
@function contrastRatio($background, $foreground) {
  $backgroundLum: luminance($background) + .05;
  $foregroundLum: luminance($foreground) + .05;

  @return max($backgroundLum, $foregroundLum) / min($backgroundLum, $foregroundLum);
}

// Given $color, decide whether $lightText or $darkText should be used as the text color
// ex: chooseLightOrDarkText(#EEE, #FFF, #000) would return #000 because it has
//     a higher contrast than #FFF against a #EEE background.
@function chooseLightOrDarkText($background, $lightText, $darkText) {
  $lightContrast: contrastRatio($background, $lightText);
  $darkContrast: contrastRatio($background, $darkText);

  @if ($lightContrast > $darkContrast) {
    @return $lightText;
  }
  @else {
    @return $darkText;
  }
}

// Given a $foreground and a $background, make the $foreground AA accessibility by slightly
// adjusting it till the contrast is high enough

// ex: makeContrastColor($lightPink, #FFF) would continually shade the pink until
//     it had higher than 4.5 contrast on a white background.
@function makeHighContrastColor($foreground, $background) {
  $contrast: contrastRatio($foreground, $background);

  $highContrastTextColor: $foreground;

  @while ($contrast < 4.5) {
    $highContrastTextColor: shadeOrTint($highContrastTextColor, 5%, 5%);
    $contrast: contrastRatio($highContrastTextColor, $euiColorEmptyShade);
  }

  @return $highContrastTextColor;
}
