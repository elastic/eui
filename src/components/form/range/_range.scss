/*
 * 1. There's no way to target the layout of the extra input, so we must
 *    use the descendant selector to allow the width to shrink.
 * 2. Align extra input slightly better with slider labels, in an IE compliant way.
 * 3. Adjust vertical alignment of input based on extras
 */

.euiRange__wrapper {
  @include euiFormControlSize();
  display: flex;
  align-items: center;

  &--fullWidth {
    max-width: 100%;
  }

  &--disabled {
    .euiRange__minLabel,
    .euiRange__maxLabel,
    .euiRange__inputWrapper {
      opacity: .25;
    }
  }

  > .euiFormControlLayout { /* 1 */
    width: auto;
  }
}

.euiRange__inputWrapper {
  flex-grow: 1;
  position: relative; // for positioning ticks/levels
  align-self: flex-start; /* 3 */
}

.euiRange__minLabel,
.euiRange__maxLabel {
  font-size: $euiFontSizeXS;
}

.euiRange__extraInput {
  width: auto;
  margin-left: $euiSize;
  position: relative; /* 2 */
  top: -2px; /* 2 */
}

.euiRange__tick {
  overflow-x: hidden;
  text-overflow: ellipsis;
  font-size: $euiFontSizeXS;
  position: relative;
  padding-top: $euiSize;

  &::before {
    content: "";
    @include size($euiSizeXS);
    background-color: $euiColorDarkShade;
    border-radius: 100%;
    position: absolute;
    top: 0;
    left: calc(50% - #{($euiSizeXS/2)});
  }

  &:enabled:hover,
  &:focus,
  &--selected {
    color: $euiColorPrimary;
  }

  &--selected {
    font-weight: $euiFontWeightMedium;
  }

  &:disabled {
    cursor: not-allowed;
  }
}

.euiRange__levels {
  display: flex;
  justify-content: stretch;
  z-index: $euiZLevel0;
}

[class*="euiRange__level--"] {
  display: block;
  height: 6px;
  border-radius: 6px;
  margin: 2px;
}

// Modifier naming and colors.
$euiRange__levelColors: (
  primary: $euiColorPrimary,
  success: $euiColorSuccess,
  warning: $euiColorWarning,
  danger: $euiColorDanger,
);

// Create level modifiers based upon the map.
@each $name, $color in $euiRange__levelColors {
  .euiRange__level--#{$name} {
    background-color: transparentize($color, .7);
  }
}

.euiRange__range__progress {
  height: 4px;
  border-radius: 4px;
  background-color: $euiRangeTrackColor;
}

/*
 *  Positioning
 */

.euiRange__wrapper--hasLevels {
  .euiRange__levels {
    position: absolute;
    left: $euiSizeS;
    right: $euiSizeS;
    top: ($euiFormControlHeight/2) + 2px;
  }
}

.euiRange__wrapper--hasRange {
  .euiRange__range {
    position: absolute;
    left: $euiSizeS;
    right: $euiSizeS;
    top: ($euiFormControlHeight/2) - 2px;
    z-index: $euiZLevel0;
    overflow: hidden;
  }
}

.euiRange__wrapper--hasTicks {
  .euiRange,
  .euiRange__levels {
    width: calc(100% + #{$euiRangeThumbWidth});
  }

  .euiRange {
    height: $euiFormControlHeight/2; /* 3 */
    margin: 0 $euiRangeThumbWidth/2 * -1;
  }

  .euiRange__levels {
    top: ($euiFormControlHeight/4) + 2px;
    margin-left: $euiRangeThumbWidth * -1;
  }

  .euiRange__range {
    top: ($euiFormControlHeight/4) - 2px;
    left: 0;
    right: 0;
    margin-left: $euiRangeThumbWidth/2 * -1;
  }

  .euiRange__extraInput {
    margin-top: 0;
  }

  .euiRange__ticks {
    position: absolute;
    left: 0;
    right: 0;
    top: $euiSizeS;
    display: flex;
    z-index: $euiZLevel1;
  }
}

/*
 *  Input Range Customization by browser
 */

// The following code is inspired by...

// Github: https://github.com/darlanrod/input-range-sass
// Author: Darlan Rod https://github.com/darlanrod
// Version 1.4.1
// MIT License

// It has been modified to fit the styling patterns of Kibana and
// to be more easily maintained / themeable going forward.

.euiRange {
  // Auto means the height isn't defined
  height: $euiFormControlHeight;
  appearance: none;
  background: transparent; // Otherwise white in Chrome
  margin: 0 $euiSizeS;
  width: calc(100% - #{$euiSizeS * 2}); // ensures the slider expands to fill flex display
  position: relative;
  z-index: $euiZLevel2; // stay above tick marks
  cursor: pointer; // Keep cursor to full range bounds

  &:disabled {
    cursor: not-allowed;

    @include euiRange__thumb__perBrowser{
      cursor: not-allowed;
      border-color: $euiRangeThumbBorderColor;
      background-color: $euiRangeThumbBorderColor;
      box-shadow: none;
    }
  }

  &:focus {
    @include euiRange__thumb__perBrowser{
      @include euiCustomControl--focused;
    }

    @include euiRange__track__perBrowser{
      background-color: $euiColorPrimary;
      border-color: $euiColorPrimary;
    }

    + .euiRange__range .euiRange__range__progress {
      background-color: $euiColorPrimary;
    }
  }

  @include euiRange__thumb__perBrowser {
    cursor: pointer;
    @include euiCustomControl($type: 'round');
    border-color: $euiRangeThumbBorderColor;
    padding: 0;
    height: $euiRangeThumbHeight;
    width: $euiRangeThumbWidth;
  }

  @include euiRange__track__perBrowser {
    @include euiRange__trackSize;
    background: $euiRangeTrackColor;
    border: $euiRangeTrackBorderWidth solid $euiRangeTrackBorderColor;
    border-radius: $euiRangeTrackRadius;
  }

  // Resets

  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    margin-top: ((-$euiRangeTrackBorderWidth * 2 + $euiRangeTrackHeight) / 2) - ($euiRangeThumbHeight / 2);
  }

  &::-ms-thumb {
    margin-top: 0;
  }

  &::-ms-track {
    @include euiRange__trackSize;
    background: transparent;
    border-color: transparent;
    border-width: ($euiRangeThumbHeight / 2) 0;
    color: transparent;
  }
}

.euiRange__wrapper--hasRange .euiRange,
.euiRange__wrapper--hasTicks .euiRange {
  @include euiRange__track__perBrowser {
    background-color: transparentize($euiRangeTrackColor, .6);
    border-color: transparentize($euiRangeTrackBorderColor, .6);
  }
}
