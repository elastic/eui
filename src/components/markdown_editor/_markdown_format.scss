// The Markdown Format uses by default a few EUI components.
// Uses the EuiText to wrap all the content.
// Uses the EuiLink, EuiCode and EuiHorizontalRule.

$browserDefaultFontSize: 16px;

// We're setting a function o transform px in em
// because it's easier to think in px
@function em($pixels, $context: $browserDefaultFontSize) {
  @return #{$pixels/$context}em;
}

.euiMarkdownFormat {
  @include euiFont;
  @include euiText;

  // We're using `em` values to support apps where consumers might adjust sizes
  // and consequently the markdown needs to adjust to these changes

  // Font size variables
  $euiMarkdownFontSizeXS: em(12px);
  $euiMarkdownFontSizeS: em(14px);
  $euiMarkdownFontSize: em(16px);
  $euiMarkdownFontSizeM:  em(18px);
  $euiMarkdownFontSizeL: em(20px);
  $euiMarkdownFontSizeXL: em(28px);
  $euiMarkdownFontSizeXXL: em(36px);

  // Spacing variables
  $euiMarkdownSizeXXS: em(4px);
  $euiMarkdownSizeXS: em(8px);
  $euiMarkdownSizeS: em(12px);
  $euiMarkdownSize: em(16px);
  $euiMarkdownSizeL: em(24px);

  // We're using alpha values to support apps that
  // display markdown on backgrounds of various colors

  // Grayscale variables
  $euiMarkdownAlphaLightestShade: rgba($euiColorFullShade, .05);
  $euiMarkdownAlphaLightShade: rgba($euiColorFullShade, .15);
  $euiMarkdownAlphaDarkShade: rgba($euiColorFullShade, .65);

  // Reverse grayscale for opposite of theme
  $euiMarkdownAlphaLightestShadeReversed: rgba($euiColorEmptyShade, .05);
  $euiMarkdownAlphaLightShadeReversed: rgba($euiColorEmptyShade, .15);
  $euiMarkdownAlphaDarkShadeReversed: rgba($euiColorEmptyShade, .65);

  &--reversed {
    color: $euiColorLightestShade;
  }


  // Blockquotes
  .euiMarkdownFormat__blockquote {
    padding: 0 1em;
    border-left: $euiMarkdownSizeXXS solid $euiMarkdownAlphaLightShade;
    margin-bottom: $euiMarkdownFontSize;
  }

  &--reversed .euiMarkdownFormat__blockquote {
    border-left-color: $euiMarkdownAlphaLightShadeReversed;
  }

  .euiHorizontalRule {
    background-color: $euiMarkdownAlphaLightShade;
  }

  // Checkboxes
  .euiCheckbox {
    // sass-lint:disable-block no-important
    margin-bottom: 0 !important;
  }

  .euiCheckbox + *:not(.euiCheckbox) {
    margin-top: $euiMarkdownSize;
  }

  // Task list
  .task-list-item {
    list-style-type: none;
  }

  .task-list-item + .task-list-item {
    margin-top: $euiMarkdownSizeXXS;
  }

  .task-list-item input {
    margin: 0 .2em .25em -1.6em;
    vertical-align: middle;
  }

  // Code block
  .euiMarkdownFormat__codeblockWrapper {
    margin-bottom: $euiMarkdownSize;
  }

  // Tables
  .euiMarkdownFormat__table {
    display: block;
    width: 100%;
    overflow: auto;
    border-left: 1px solid $euiMarkdownAlphaLightShade;
    border-spacing: 0;
    border-collapse: collapse;
    margin-bottom: $euiMarkdownSize;

    &:last-child {
      margin-bottom: $euiMarkdownSize;
    }
  }

  .euiMarkdownFormat__table th,
  .euiMarkdownFormat__table td {
    padding: $euiMarkdownSizeXXS $euiMarkdownSizeXS;
    border-top: 1px solid $euiMarkdownAlphaLightShade;
    border-bottom: 1px solid $euiMarkdownAlphaLightShade;

    &:last-child {
      border-right: 1px solid $euiMarkdownAlphaLightShade;
    }
  }

  .euiMarkdownFormat__table tr {
    background-color: transparent;
    border-top: 1px solid $euiMarkdownAlphaLightShade;
  }
}
