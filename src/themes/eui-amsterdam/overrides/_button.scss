// This file has lots of modifiers and is somewhat nesty by nature
//sass-lint:disable nesting-depth

.euiButton,
.euiButtonIcon {
  // sass-lint:disable no-important
  // remove for all states
  box-shadow: none !important;
}

.euiButton.euiButton-isDisabled:not(.euiButton--ghost),
.euiButtonIcon.euiButtonIcon-isDisabled:not(.euiButtonIcon--ghost) {
  &,
  &:hover {
    $backgroundColorSimulated: mix($euiPageBackgroundColor, $euiButtonColorDisabled, 90%);
    background-color: transparentize($euiButtonColorDisabled, .9);
    color: makeDisabledContrastColor($euiButtonColorDisabled, $backgroundColorSimulated);
  }
}

.euiButtonIcon--empty.euiButtonIcon-isDisabled:not(.euiButtonIcon--ghost) {
  &,
  &:hover {
    background-color: transparent;
    color: makeDisabledContrastColor($euiButtonColorDisabled, $euiPageBackgroundColor);
  }
}

.euiButton--small,
.euiButtonIcon--small,
.euiButtonIcon--xSmall {
  // Use a moderately smaller radius on small buttons
  // so that they don't appear completely rounded
  border-radius: $euiBorderRadius * (2 / 3);
}

// Change the hollow (bordered) buttons to have a transparent background
// and no border
@each $name, $color in $euiButtonTypes {
  .euiButton--#{$name} {
    @include euiButtonDefaultStyle($color);

    @if ($name == 'ghost') {
      // Ghost is unique and ALWAYS sits against a dark background.
      $backgroundColorSimulated: mix($euiColorInk, $color, 70%);
      color: makeHighContrastColor($color, $backgroundColorSimulated);
    } @else {
      &.euiButton--fill:focus {
        outline-color: lightOrDarkTheme($euiColorInk, $euiColorGhost);
      }
    }

    &.euiButton--fill:not([class*='isDisabled']) {
      color: chooseLightOrDarkText($color, $euiColorGhost, $euiColorInk);

      &,
      &:hover,
      &:focus {
        background-color: $color;
      }
    }
  }
}

// Fix ghost/disabled look specifically
.euiButton.euiButton-isDisabled.euiButton--ghost,
// adding fill type to override default theme
.euiButton.euiButton-isDisabled.euiButton--ghost.euiButton--fill {
  &,
  &:focus {
    color: $euiButtonColorGhostDisabled;
    background-color: transparentize($euiButtonColorGhostDisabled, .9);
  }
}


// Duplicating the above for EuiButtonIcon
@each $name, $color in $euiButtonTypes {
  .euiButtonIcon--#{$name}:not(.euiButtonIcon--empty) {
    @include euiButtonDefaultStyle($color);

    @if ($name == 'ghost') {
      // Ghost is unique and ALWAYS sits against a dark background.
      $backgroundColorSimulated: mix($euiColorInk, $color, 70%);
      color: makeHighContrastColor($color, $backgroundColorSimulated);
    } @else {
      &.euiButtonIcon--fill:focus {
        outline-color: lightOrDarkTheme($euiColorInk, $euiColorGhost);
      }
    }

    &.euiButtonIcon--fill:not([class*='isDisabled']) {
      color: chooseLightOrDarkText($color, $euiColorGhost, $euiColorInk);

      &,
      &:hover,
      &:focus {
        background-color: $color;
      }
    }
  }
}

// Fix ghost/disabled look specifically
.euiButtonIcon:not(.euiButtonIcon--empty).euiButtonIcon-isDisabled.euiButtonIcon--ghost,
// adding fill type to override default theme
.euiButtonIcon.euiButtonIcon-isDisabled.euiButtonIcon--ghost.euiButtonIcon--fill {
  &,
  &:focus {
    color: $euiButtonColorGhostDisabled;
    background-color: transparentize($euiButtonColorGhostDisabled, .9);
  }
}
