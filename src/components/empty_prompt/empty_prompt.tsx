/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, {
  FunctionComponent,
  ReactElement,
  ReactNode,
  useMemo,
} from 'react';
import classNames from 'classnames';

import { useEuiTheme } from '../../services';
import { CommonProps } from '../common';
import { EuiTitle, EuiTitleSize } from '../title';
import { EuiFlexGroup, EuiFlexItem } from '../flex';
import { EuiSpacer } from '../spacer';
import { EuiIcon, IconColor, IconType } from '../icon';
import { isNamedColor } from '../icon/named_colors';
import { EuiText } from '../text';
import { EuiPanel, _EuiPanelDivlike } from '../panel/panel';

import { euiEmptyPromptStyles } from './empty_prompt.styles';

export const PADDING_SIZES = ['none', 's', 'm', 'l'] as const;
export type PaddingSize = (typeof PADDING_SIZES)[number];

export type EuiEmptyPromptProps = CommonProps &
  Omit<
    _EuiPanelDivlike,
    'borderRadius' | 'grow' | 'panelRef' | 'paddingSize' | 'title' | 'element'
  > & {
    /*
     * Accepts any [EuiIcon.type](#/display/icons)
     */
    iconType?: IconType;
    /**
     * Color for `iconType` when passed as an `IconType`
     */
    iconColor?: IconColor;
    /**
     * Custom icon replacing the one generated by `iconType`
     */
    icon?: ReactNode;
    /**
     * Requires passing a single element that gets wrapped in an EuiTitle.
     * Recommendation is a heading, preferrably an `<h2>` if in its own section
     */
    title?: ReactElement<any>;
    /**
     * Choose from one of the `EuiTitle.size` options
     */
    titleSize?: EuiTitleSize;
    /**
     * Gets wrapped in a subdued EuiText block.
     * Recommendation is to pass typical text elements like `<p>`
     */
    body?: ReactNode;
    /**
     * Pass a single or an array of actions (buttons) that get stacked at the bottom.
     * Recommendation is to pass the primary action first and secondary actions as empty buttons
     */
    actions?: ReactNode;
    /**
     * Optionally provide a footer. Accepts any combination of elements.
     */
    footer?: ReactNode;
    /**
     * Sets the layout. When `horizontal` the icon goes to the right column.
     */
    layout?: 'vertical' | 'horizontal';

    /**
     * Padding applied around the content and footer.
     */
    paddingSize?: PaddingSize;
  };

export const EuiEmptyPrompt: FunctionComponent<EuiEmptyPromptProps> = ({
  icon,
  iconType,
  iconColor: _iconColor,
  title,
  titleSize = 'm',
  paddingSize = 'l',
  body,
  actions,
  className,
  layout = 'vertical',
  hasBorder,
  color = 'transparent',
  footer,
  ...rest
}) => {
  const classes = classNames('euiEmptyPrompt', className);
  const euiTheme = useEuiTheme();
  const styles = useMemo(() => euiEmptyPromptStyles(euiTheme), [euiTheme]);
  const cssStyles = [styles.euiEmptyPrompt, styles[layout]];
  const mainStyles = [
    styles.main.euiEmptyPrompt__main,
    styles.main[layout],
    styles.main[paddingSize],
    layout === 'horizontal' && styles.main.horizontalPadding[paddingSize],
  ];
  const contentStyles = [
    styles.content.euiEmptyPrompt__content,
    styles.content[layout],
  ];

  // Default the iconColor to `subdued`,
  // otherwise try to match the iconColor with the panel color unless iconColor is specified
  const iconColor = _iconColor ?? (isNamedColor(color) ? color : 'subdued');
  const iconNode = useMemo(() => {
    if (!iconType && !icon) return null;

    const iconStyles = [styles.icon.euiEmptyPrompt__icon, styles.icon[layout]];
    return (
      <div className="euiEmptyPrompt__icon" css={iconStyles}>
        {iconType ? (
          <EuiIcon type={iconType} size="xxl" color={iconColor} />
        ) : (
          icon
        )}
      </div>
    );
  }, [icon, iconType, iconColor, layout, styles.icon]);

  const actionsNode = useMemo(() => {
    if (!actions) return null;

    if (Array.isArray(actions)) {
      const actionStyles = [
        styles.actions.euiEmptyPrompt__actions,
        styles.actions[layout],
      ];
      return (
        <EuiFlexGroup
          className="euiEmptyPrompt__actions"
          css={actionStyles}
          gutterSize="m"
          alignItems="center"
          justifyContent="center"
          direction={layout === 'vertical' ? 'column' : 'row'}
        >
          {actions.map((action, index) => (
            <EuiFlexItem key={index} grow={false}>
              {action}
            </EuiFlexItem>
          ))}
        </EuiFlexGroup>
      );
    } else {
      return actions;
    }
  }, [actions, layout, styles.actions]);

  const footerNode = useMemo(() => {
    if (!footer) return null;
    const footerStyles = [
      styles.footer.euiEmptyPrompt__footer,
      styles.footer[paddingSize],
      styles.footer[color],
      color === 'transparent' && !hasBorder && styles.footer.roundedBorders,
    ];
    return (
      <div className="euiEmptyPrompt__footer" css={footerStyles}>
        {footer}
      </div>
    );
  }, [footer, paddingSize, color, hasBorder, styles.footer]);

  return (
    <EuiPanel
      css={cssStyles}
      className={classes}
      color={color}
      paddingSize="none"
      grow={false}
      hasBorder={hasBorder}
      {...rest}
    >
      <div className="euiEmptyPrompt__main" css={mainStyles}>
        {iconNode}
        <div className="euiEmptyPrompt__content" css={contentStyles}>
          {title && <EuiTitle size={titleSize}>{title}</EuiTitle>}
          {title && body && <EuiSpacer size="m" />}
          {body && <EuiText color="subdued">{body}</EuiText>}
          {actionsNode && (body || title) && <EuiSpacer size="l" />}
          {actionsNode}
        </div>
      </div>
      {footerNode}
    </EuiPanel>
  );
};
