@import '../../panel/index';

@include screenXSmall(){

  .euiTableHeaderMobile {
    display: flex;
    justify-content: flex-end;
    padding: $euiTableCellContentPadding 0;
  }

  .euiTableSortMobile {
    display: block;
  }

  .euiTable.euiTable--responsive {

    thead {
      display: none; // Use mobile versions of selecting and filtering instead
    }

    // Not allowing compressed styles in mobile view (for now)
    // .euiTable--compressed {
    //   .euiTableRowCellCheckbox::before,
    //   .euiTableRowCell::before {
    //     padding: $euiSizeXS;
    //     padding-bottom: 0;
    //     margin-bottom: -$euiSizeXS;
    //   }
    // }

    // Make each row a Panel
    @include euiPanel($selector: 'euiTableRow');

    .euiTableRow {
      display: flex;
      flex-wrap: wrap;
      padding: $euiTableCellContentPadding;
      margin-bottom: $euiTableCellContentPadding;

      &:hover {
        background-color: transparent;
      }

      &.euiTableRow-isSelectable {
        @include euiTableActionsBackground--mobile;

        padding-right: $euiTableCellCheckboxWidth + $euiTableCellContentPadding;
        position: relative;

        .euiTableRowCellCheckbox {
          position: absolute;
          right: $euiTableCellContentPadding/2;
          top: $euiTableCellContentPadding + (($euiTableCellContentPadding*$euiLineHeight)-$euiTableCellContentPadding); // same as row padding-top + cell padding + 1/2 line height
        }
      }

      // override hover & selected colors
      &.euiTableRow-isSelected {
        &,
        &:hover,
        + .euiTableRow.euiTableRow-isExpandedRow,
        &:hover + .euiTableRow.euiTableRow-isExpandedRow .euiTableRowCell {
          background-color: $euiTableSelectedColor;
        }
      }

      &.euiTableRow-isExpandable,
      &.euiTableRow-hasActions {
        position: relative;

        .euiTableRowCell--isExpander,
        .euiTableRowCell--hasActions {
          min-width: 0;
          width: $euiSizeL;
          position: absolute;
          top: $euiTableCellContentPadding + (($euiTableCellContentPadding*$euiLineHeight)-$euiTableCellContentPadding); // same as row padding-top + cell padding + 1/2 line height

          &::before {
            display: none; // Don't display table headers
          }

          .euiTableCellContent {
            padding: 0;

            .euiLink {
              padding: $euiSizeXS;
            }
          }
        }
      }

      &.euiTableRow-isExpandable {
        padding-left: $euiSizeXXL;

        .euiTableRowCell--isExpander {
          left: $euiTableCellContentPadding;
        }
      }

      &.euiTableRow-hasActions {
        padding-right: $euiSizeXXL;

        .euiTableRowCell--hasActions {
          right: $euiTableCellContentPadding;
        }

        &.euiTableRow-isSelectable {
          .euiTableRowCell--hasActions {
            top: auto;
            bottom: $euiSize; // same as row padding-bottom
          }
        }
      }

      &.euiTableRow-isExpandedRow {
        @include euiTableActionsBackground--mobile;
        @include euiBottomShadowMedium;
        margin-top: -$euiTableCellContentPadding*2;
        position: relative;
        z-index: 2; // on top of it's parent/previous row
        border-top: none;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
        padding-left: $euiSizeS; // override selectable as the padding is already applied via the contents

        &:hover {
          background-color: $euiColorEmptyShade; // keep white background to cover triggering row's border
        }

        .euiTableRowCell {
          width: calc(100% - #{$euiTableCellContentPadding});

          &::before {
            display: none;
          }
        }
      }
    }

    .euiTableRowCell {
      display: block; /* IE requires block to grow and wrap. */
      min-width: 50%;
      border: none;

      // Prepend the data attribute "data-header" to each cell
      &::before {
        content: attr(data-header);
        display: block;
        @include fontSize($euiFontSize * .6875);
        color: $euiColorDarkShade;
        padding: $euiSizeS;
        padding-bottom: 0;
        margin-bottom: -$euiSizeS; // pull up cell content closer

        min-height: 26px;

        // Always truncate
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      &.euiTableRowCell--isMobileHeader {
        @include euiFontSize;
        display: block;
        width: 100%;

        &::before {
          display: none; // don't display the header prop
        }
      }

      &.euiTableRowCell--isMobileFullWidth {
        width: 100%;

        .euiTableCellContent--alignCenter {
          justify-content: center;
          text-align: center;
        }
      }

      &.euiTableRowCell--hideForMobile { // must come last to override any special cases
        display: none;
      }
    }

    .euiTableRowCellCheckbox {
      border: none;
    }

    // always show hover items on mobile
    .euiTableCellContent--showOnHover {
      .euiTableCellContent__hoverItem {
        opacity: 1;
      }
    }

    // force all content back to left side
    .euiTableCellContent--alignRight {
      justify-content: flex-start;
    }

    .euiTableCellContent--alignCenter {
      justify-content: flex-start;
    }
  }
}
