#!/usr/bin/env bash

set -e
set +x

# Two stage script: first it compiles using Node Docker container, then it runs
# itself from within another docker container to deploy to GCP.

# Usage:
# * Compile and deploy:          ./scripts/deploy/deploy_docs
# * Deploy only without docker:  ./scripts/deploy/deploy_docs nodocker

# Expected env variables:
# * GPROJECT - GCE project name, e.g. elastic-bekitzur
# * GCE_ACCOUNT - credentials for the google service account (JSON blob)
# * GCE_IMAGE - Google's Docker image to publish docs
# * GIT_BRANCH - current Git branch or tag (e.g. "refs/heads/main", "v18.2.1")
# * GIT_PULL_REQUEST_ID - current Git PR (Ex. 6999) or "false" from Buildkite env
# * GIT_TAG - current Git tag (Ex. v87.0.0) from Buildkite env
# * DEPLOY_ROOT - passed in from Buildkite UI or undefined. Manually publishes release docs when set to true.

# Test that DEPLOY_ROOT is being passed properly
# TODO: Revert
echo "Testing deploy_root is ${DEPLOY_ROOT}"

if [[ -z "${GPROJECT}" ]]; then
    echo "GPROJECT is not set, e.g. 'GPROJECT=elastic-bekitzur'"
    exit 1
fi
if [[ -z "${GCE_ACCOUNT}" ]]; then
  echo "GCE_ACCOUNT is not set. Expected Google service account JSON blob."
  exit 1
fi
if [[ -z "${GIT_BRANCH}" ]]; then
  echo "GIT_BRANCH is not set, e.g. 'GIT_BRANCH=refs/heads/main'"
  exit 1
fi

post_comment_to_gh()
{
  if [[ -z "${GITHUB_TOKEN}" ]]; then
    echo "Warning: GITHUB_TOKEN is not set; cannot publish PR docs preview URL to Github."
  else
    set +x

    echo 'Deleting previous staging PR link comments'
    kibanamachine_comment_ids=$( \
      curl -s -L "https://api.github.com/repos/elastic/eui/issues/${GIT_PULL_REQUEST_ID}/comments" \
      | jq -c '.[] | select(.user.login == "kibanamachine") | .id' \
    )
    for comment_id in "${kibanamachine_comment_ids[@]}"; do
      curl -L \
        -X DELETE \
        -H "Authorization: token ${GITHUB_TOKEN}" \
        "https://api.github.com/repos/elastic/eui/issues/comments/${comment_id}"
    done

    printf '\nAdding comment to GitHub Pull Request: %i\n' "${GIT_PULL_REQUEST_ID}"
    comment="Preview staging links for this PR:
- Docs site: https://eui.elastic.co/pr_${GIT_PULL_REQUEST_ID}/
- Storybook: https://eui.elastic.co/pr_${GIT_PULL_REQUEST_ID}/storybook"

    curl \
      --silent \
      --location \
      --header "Authorization: token ${GITHUB_TOKEN}" \
      --request POST \
      --data "$(jq --null-input --arg comment "$comment" '{ body: $comment }')" \
      "https://api.github.com/repos/elastic/eui/issues/${GIT_PULL_REQUEST_ID}/comments"
  fi
}

publish_to_bucket()
{
  copy_options=(
    -m # enable multithreading
    -h "Cache-Control: public, max-age=${max_age}, must-revalidate" # set caching policy
    cp
    -r # copy files recursively
    -a public-read # set ACL to allow read by everyone
    -z js,css,html # enable gzip encoding for these extensions
  )

  echo "Copying ${PWD}/docs/* to ${full_bucket_path}"
  gsutil "${copy_options[@]}" "${PWD}/docs/*" "${full_bucket_path}"

  echo "Copying ${PWD}/storybook-static/* to ${full_bucket_path}storybook/"
  gsutil "${copy_options[@]}" "${PWD}/storybook-static/*" "${full_bucket_path}storybook/"
}

if [[ "$1" != "nodocker" ]]; then
  ./scripts/deploy/build_docs

  # Get the latest tag on main, which will determine whether we deploy to the root `eui.elastic.co` bucket
  # NOTE: specifying the main branch means we don't override prod with backport or prerelease tags.
  CURRENT_RELEASE=$(git describe --tags "$(git rev-list --branches=main --tags --max-count=1)")
  echo "Current release: ${CURRENT_RELEASE}"

  # Run this script from inside the docker container, using google/cloud-sdk image
  echo "Deploying to bucket using ${GCE_IMAGE} Docker image"
  docker run \
    -i --rm \
    --env GCE_ACCOUNT \
    --env GIT_BRANCH \
    --env GPROJECT \
    --env GIT_PULL_REQUEST_ID \
    --env GIT_TAG \
    --env CURRENT_RELEASE="${CURRENT_RELEASE}" \
    --env DEPLOY_ROOT="${DEPLOY_ROOT}" \
    --env HOME=/tmp \
    --user="$(id -u):$(id -g)" \
    --volume "${PWD}":/app:ro \
    --workdir /app \
    "${GCE_IMAGE}" \
    /app/scripts/deploy/deploy_docs nodocker "$@"
  unset GCE_ACCOUNT

  # If the branch is not a pull request, Buildkite passes "false"
  # https://buildkite.com/docs/pipelines/environment-variables#BUILDKITE_PULL_REQUEST
  if [[ "${GIT_PULL_REQUEST_ID}" != "false" ]]; then
    post_comment_to_gh
  fi
  unset GITHUB_TOKEN
else
  # Copying files to the bucket
  # Login to the cloud with the service account
  gcloud auth activate-service-account --key-file <(echo "${GCE_ACCOUNT}")
  unset GCE_ACCOUNT

  # Copy files
  EUI_DOCS_PROJECT=eui-docs-live
  BUCKET=${GPROJECT}-${EUI_DOCS_PROJECT}

  max_age="1800"

  # Deploy docs to a pull request directory only
  if [[ "${GIT_PULL_REQUEST_ID}" != "false" ]]; then
    echo "Staging pull request ${GIT_PULL_REQUEST_ID}"
    full_bucket_path="gs://${BUCKET}/pr_${GIT_PULL_REQUEST_ID}/"
    publish_to_bucket

  # Our branched docs deploys are **only** ever triggered by tags
  # https://buildkite.com/docs/pipelines/environment-variables#BUILDKITE_TAG
  elif [[ -n "${GIT_TAG}" ]]; then
    echo "Deploying eui.elastic.co/${GIT_TAG}"
    full_bucket_path="gs://${BUCKET}/${GIT_TAG}/"
    max_age="1800" # Reducing to 15 minutes to limit stale docs
    publish_to_bucket

    # If this is the highest release number to date, publish to root directory
    if [[ "${CURRENT_RELEASE}" == "${GIT_TAG}" ]]; then
      echo "${GIT_TAG} is the latest release. Deploying to root eui.elastic.co"
      full_bucket_path="gs://${BUCKET}/"
      publish_to_bucket
    fi

  # Manually deploy latest docs via Buildkite UI
  elif [[ "${DEPLOY_ROOT}" == "true" ]]; then
    echo "Maually deploying latest release. Deploying to root eui.elastic.co"
    full_bucket_path="gs://${BUCKET}/"
    publish_to_bucket

  # Let users know none of the three jobs ran
  else
    echo "This is neither a pull request nor a tag release. No docs were deployed."
  fi
fi
