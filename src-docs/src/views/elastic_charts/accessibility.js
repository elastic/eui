import React, { Fragment } from 'react';

import { ExternalBadge } from './shared';

import {
  EuiCode,
  EuiCodeBlock,
  EuiSpacer,
  EuiFlexGroup,
  EuiFlexItem,
  EuiCard,
  EuiIcon,
  EuiText,
} from '../../../../src/components';
import { TextureMultiSeriesChart } from './texture';

const warningCard = [
  {
    title: 'Warning',
    iconType: 'alert',
    iconColor: 'warning',
    description: (
      <>
        <EuiCode>{'ariaDescribedBy'}</EuiCode> will override{' '}
        <EuiCode>{'ariaDescription'}</EuiCode> if both are specified.
      </>
    ),
  },
  {
    title: 'Warning',
    iconType: 'alert',
    iconColor: 'warning',
    description: (
      <>
        Currently, data tables are only available for{' '}
        <strong>partition charts</strong>{' '}
      </>
    ),
  },
];

export const ElasticChartsAccessiblityExample = {
  title: 'Accessibility features',
  intro: (
    <Fragment>
      <ExternalBadge />
      <EuiSpacer size="l" />
      <EuiText>
        Elastic charts is becoming more and more accessible for all users.
      </EuiText>
      <EuiSpacer />
      <EuiText>
        <strong>Available a11y-related features</strong>
      </EuiText>
      <EuiText>
        <ul>
          <li>Chart titles</li>
          <li>Chart descriptions</li>
          <li>Texture fill (for xy charts)</li>
        </ul>
      </EuiText>
    </Fragment>
  ),
  sections: [
    {
      title: 'ariaDescription and ariaDescribedBy',
      text: (
        <>
          The <EuiCode>{'ariaDescription'}</EuiCode> and{' '}
          <EuiCode>{'ariaDescribedBy'}</EuiCode> can be set the through the{' '}
          <EuiCode>{'<Settings />'}</EuiCode> component.{' '}
          <EuiCode>{'ariaDescription'}</EuiCode> takes a string description
          which will be visually hidden whereas{' '}
          <EuiCode>{'ariaDescribedBy'}</EuiCode> takes an `id` that you have
          rendered elsewhere in your app.
          <EuiSpacer />
          <EuiFlexGroup responsive={false} wrap>
            <EuiFlexItem key={warningCard[0].title} style={{ minWidth: 170 }}>
              <EuiCard
                layout="horizontal"
                title={
                  <EuiFlexGroup
                    gutterSize="s"
                    responsive={false}
                    alignItems="center">
                    <EuiFlexItem grow={false}>
                      <EuiIcon
                        type={warningCard[0].iconType}
                        color={warningCard[0].iconColor}
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>{warningCard[0].title}</EuiFlexItem>
                  </EuiFlexGroup>
                }
                titleElement="h2"
                description={warningCard[0].description}
              />
            </EuiFlexItem>
          </EuiFlexGroup>
          <EuiSpacer />
          <EuiCodeBlock language="javascript" isCopyable fontSize="s">
            {`<Settings 
ariaDescription="This chart has three different types of series. There is a bar, line and area series." 
ariaUseDefaultSummary={false}
/>`}
          </EuiCodeBlock>
        </>
      ),
    },
    {
      title: 'ariaLabel and ariaLabelledBy',
      text: (
        <>
          Within the <EuiCode>{'<Settings />'}</EuiCode> component, you can add
          your own aria-label on the figure surrounding the chart element. Use
          the <EuiCode>{'ariaLabel'}</EuiCode> prop on the{' '}
          <EuiCode>{'<Settings />'}</EuiCode> component.
          <EuiSpacer />
          The aria-labeledby can be set with the{' '}
          <EuiCode>{'ariaLabelledBy'}</EuiCode> prop to tie the charts to other
          accessible elements within your app.
        </>
      ),
    },
    {
      title: 'ariaLabelHeadingLevel',
      text: (
        <>
          You can also change the heading level (instead of{' '}
          <EuiCode>{'p'}</EuiCode> as the default) by passing the
          ariaLabelHeadingLevel to the
          <EuiCode>{'<Settings />'}</EuiCode> component. Valid options are{' '}
          <EuiCode>{`h1,
          h2, h3, h4, h5, h6,`}</EuiCode>{' '}
          or
          <EuiCode>{'p'}</EuiCode>.
        </>
      ),
    },
    {
      title: 'ariaUseDefaultSummary and ariaTableCaption',
      text: (
        <>
          The default description generated by elastic charts can be disabled by
          setting <EuiCode>{'ariaUseDefaultSummary={false}'}</EuiCode> in the{' '}
          <EuiCode>{'<Settings />'}</EuiCode> component.
          <EuiSpacer />
          <EuiCode>{'ariaTableCaption'}</EuiCode> is available to set a caption
          to the data table for users of assistive technologies.
          <EuiSpacer />
          <EuiFlexGroup responsive={false} wrap>
            <EuiFlexItem key={warningCard[1].title} style={{ minWidth: 170 }}>
              <EuiCard
                layout="horizontal"
                title={
                  <EuiFlexGroup
                    gutterSize="s"
                    responsive={false}
                    alignItems="center">
                    <EuiFlexItem grow={false}>
                      <EuiIcon
                        type={warningCard[1].iconType}
                        color={warningCard[1].iconColor}
                      />
                    </EuiFlexItem>
                    <EuiFlexItem>{warningCard[1].title}</EuiFlexItem>
                  </EuiFlexGroup>
                }
                titleElement="h2"
                description={warningCard[1].description}
              />
            </EuiFlexItem>
          </EuiFlexGroup>
        </>
      ),
    },
    {
      title: 'Texture',
      text: (
        <>
          You can set the fill for area charts with texture fills with the{' '}
          <EuiCode>{'TextureStyles interface'}</EuiCode>
          <EuiSpacer />
          <EuiCodeBlock language="javascript">
            {`interface TexturedStylesBase {
  /** polygon fill color for texture */
  fill?: Color | ColorVariant;
  /** polygon stroke color for texture */
  stroke?: Color | ColorVariant;
  /** polygon stroke width for texture  */
  strokeWidth?: number;
  /** polygon opacity for texture  */
  opacity?: number;
  /** polygon opacity for texture  */
  dash?: number[];
  /** polygon opacity for texture  */
  size?: number;
  /**
   * The angle of rotation for entire texture
   * in degrees
   */
  rotation?: number;
  /**
   * The angle of rotation for polygons
   * in degrees
   */
  shapeRotation?: number;
  /** texture spacing between polygons */
  spacing?: Partial<Point> | number;
  /** overall origin offset of pattern */
  offset?: Partial<Point> & {
    /** apply offset along global coordinate axes */
    global?: boolean;
  };
}

interface TexturedShapeStyles extends TexturedStylesBase {
  /** typed of texture designs currently supported */
  shape: TextureShape;
}

interface TexturedPathStyles extends TexturedStylesBase {
  /** path for polygon texture */
  path: string | Path2D;
}

/**
 * @public
 *
 * Texture style config for area spec
 */
export type TexturedStyles = TexturedPathStyles | TexturedShapeStyles;`}
          </EuiCodeBlock>
        </>
      ),
      demo: <TextureMultiSeriesChart />,
      snippet: `
    <Chart size={{ height: 200 }}>
      <BarSeries
        key={1}
        id={'series-1'}
        barSeriesStyle={{
          rect: {
            opacity: 0.2,
            texture: {
              opacity: 1,
              offset: { x: undefined, y: undefined },
              rotation: undefined,
              shape: 'square',
              shapeRotation: undefined,
              size: 9,
              spacing: { x: undefined, y: undefined },
            },
          },
        }}
        stackAccessors={['yes']}
        data={SAMPLE_SMALL_DATA}
        curve={CurveType.CURVE_MONOTONE_X}
      />
      <AreaSeries
        key={2}
        id={'series-2'}
        areaSeriesStyle={{
          area: {
            opacity: 0.05,
            shape: 'circle',
            texture: {
              opacity: 1,
              shape: 'circle',
              rotation: undefined,
              shapeRotation: undefined,
              size: 5,
              spacing: {
                x: 0,
                y: 0,
              },
              offset: {
                x: 0,
                y: 1,
              },
            },
          },
        }}
        data={SAMPLE_SMALL_DATA_2}
      />
    </Chart>`,
    },
  ],
};
