// TODO: Address nesting during Emotion conversion, if possible
// stylelint-disable max-nesting-depth

.euiFormControlLayout {
  // Let the height expand as needed
  @include euiFormControlSize($includeAlternates: true);

  $iconSize: map-get($euiFormControlIconSizes, 'medium');
  $iconPadding: $euiFormControlPadding;
  $marginBetweenIcons: $euiFormControlPadding / 2;

  // The `.euiFormControlLayout-{num}icons` selector string is also declared in `src/components/form/form_control_layout/_num_icons.test.ts`.
  // It is the same for all form controls so as to lessen the total classes exported,
  // we use a form control layout class on all form controls.
  @for $i from 1 through 5 {
    &--#{$i}icons {
      padding-right: $iconPadding + ($iconSize + $marginBetweenIcons) * $i;

      &[class*='compressed'] {
        $iconSizeCompressed: map-get($euiFormControlIconSizes, 'small');
        $iconPaddingCompressed: $euiFormControlCompressedPadding;

        padding-right: $iconPaddingCompressed + ($iconSizeCompressed + $marginBetweenIcons) * $i;
      }
    }
  }
}

.euiFormControlLayout__childrenWrapper {
  position: relative;
}

/**
 * 1. Account for inner box-shadow style border
 * 2. Ensure truncation works in children elements
 */

.euiFormControlLayout--group {
  // Match just the regular drop shadow of inputs
  @include euiFormControlDefaultShadow;
  display: flex;
  align-items: stretch;
  padding: 1px; /* 1 */

  // Force the stretch of any children so they expand the full height of the control
  > *,
  .euiPopover__anchor,
  .euiButtonEmpty,
  .euiText,
  .euiFormLabel,
  .euiButtonIcon {
    height: 100%;
  }

  .euiFormControlLayout__childrenWrapper {
    flex-grow: 1;
    overflow: hidden; /* 2 */
  }

  .euiFormControlLayout__prepend,
  .euiFormControlLayout__append {
    @include euiTextTruncate;
    flex-shrink: 0;
    height: 100%;
    border-radius: 0;

    // ICONS

    &.euiIcon,
    .euiIcon {
      padding: 0 $euiSizeS;
      width: $euiSizeXL;
      border-radius: 0;
      background-color: $euiFormInputGroupLabelBackground;
    }

    &.euiButtonIcon,
    &.euiButtonEmpty,
    .euiButtonIcon,
    .euiButtonEmpty {
      transform: none !important; // stylelint-disable-line declaration-no-important

      // Undo sizing from icons inside buttons
      .euiIcon {
        background: none !important; // stylelint-disable-line declaration-no-important
        padding: 0;
        width: $euiSize;
      }
    }
  }

  .euiButtonIcon {
    padding: 0 $euiSizeS;
    width: $euiSizeXL;
    border-radius: 0;

    &:not(:focus) {
      background-color: $euiFormInputGroupLabelBackground;
    }

    &:focus-visible {
      outline: 2px solid $euiFocusRingColor;
      outline-offset: -2px;
    }
  }

  .euiToolTipAnchor > .euiIcon {
    height: 100%;
    background-color: $euiFormInputGroupLabelBackground;
    padding: 0 $euiSizeS;
    width: $euiSizeXL;
    border-radius: 0;
  }

  > .euiFormControlLayout__prepend,
  > .euiFormControlLayout__append {
    max-width: 50%; // Make sure max-width only applies to the outer most append/prepend element
  }

  // stylelint-disable declaration-no-important
  // This is the only way to target specific components to override styling

  // TEXT

  .euiFormLabel,
  .euiText {
    background-color: $euiFormInputGroupLabelBackground;
    padding: $euiFormControlPadding;
    line-height: $euiSize !important;
    cursor: default !important; // pointer cursor on some form labels but not others is confusing

    // If the next sibling is not the input, pull it closer to the text to reduce space
    + *:not(.euiFormControlLayout__childrenWrapper):not(input) {
      margin-left: -$euiFormControlPadding;
    }
  }

  // If any child that is not the input has a next sibling that is text, pull it closer to the text to reduce space
  > *:not(.euiFormControlLayout__childrenWrapper) {
    + .euiFormLabel,
    + .euiText {
      margin-left: -$euiFormControlPadding;
    }
  }

  // BORDERS on buttons only

  .euiButtonEmpty {
    border-right: $euiFormInputGroupBorder;
  }

  // Any buttons after the children wrapper or inside any elements after the children wrapper
  // Need to swap border sides
  .euiFormControlLayout__childrenWrapper ~ .euiButtonEmpty,
  .euiFormControlLayout__childrenWrapper ~ * .euiButtonEmpty {
    border-right: none;
    border-left: $euiFormInputGroupBorder;
  }

  // Compressed alterations

  &.euiFormControlLayout--compressed {
    @include euiFormControlDefaultShadow($borderOnly: true);
    border-radius: $euiBorderRadius / 2;
    overflow: hidden; // Keeps backgrounds inside border radius

    // Padding
    .euiFormLabel,
    .euiText {
      padding: $euiFormControlCompressedPadding;

      // If the next sibling is not the input, pull it closer to the text to reduce space
      + *:not(.euiFormControlLayout__childrenWrapper) {
        margin-left: -$euiFormControlCompressedPadding;
      }
    }

    // If any child that is not the input has a next sibling that is text, pull it closer to the text to reduce space
    > *:not(.euiFormControlLayout__childrenWrapper) {
      + .euiFormLabel,
      + .euiText {
        margin-left: -$euiFormControlCompressedPadding;
      }
    }
  }

  // ReadOnly alterations
  &.euiFormControlLayout--readOnly {
    cursor: default;
    background: $euiFormInputGroupLabelBackground;
    border-color: transparent;
    box-shadow: inset 0 0 0 1px $euiFormInputGroupLabelBackground;

    input {
      background-color: $euiFormBackgroundReadOnlyColor;
    }
  }
}
