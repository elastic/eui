.euiDataGridRow {
  display: inline-flex;
  min-width: 100%; // Needed to prevent wraps. Inline flex is tricky
}

@include euiDataGridRowCell {
  @include euiFontSizeS;

  padding: $euiDataGridCellPaddingM;
  border-right: $euiDataGridVerticalBorder;
  border-bottom: $euiBorderThin;
  flex: 0 0 auto;
  background: $euiColorEmptyShade;
  position: relative;
  align-items: center;
  display: flex;

  // Hack to allow for all the focus guard stuff
  > * {
    max-width: 100%;
    width: 100%;
  }

  &.euiDataGridRowCell--firstColumn {
    border-left: $euiBorderThin;
  }

  &.euiDataGridRowCell--lastColumn {
    border-right-color: $euiBorderColor;
  }

  &:focus {
    @include euiDataGridCellFocus;
    margin-top: -1px;
  }

  // Only add the transition effect on hover, so that it is instantaneous on focus
  // Long delays on hover to mitigate the accordion effect
  &:hover {
    .euiDataGridRowCell__expandButtonIcon {
      animation-duration: $euiAnimSpeedExtraFast;
      animation-name: euiDataGridCellButtonSlideIn;
      animation-iteration-count: 1;
      animation-delay: $euiAnimSpeedNormal;
      animation-fill-mode: forwards;
    }

    .euiDataGridRowCell__actionButtonIcon {
      animation-duration: $euiAnimSpeedExtraFast;
      animation-name: euiDataGridCellButtonSlideIn;
      animation-iteration-count: 1;
      animation-delay: $euiAnimSpeedNormal;
      animation-fill-mode: forwards;
    }
  }

  &:not(:hover),
  &.euiDataGridRowCell--open {
    .euiDataGridRowCell__expandButtonIcon {
      animation: none;
      margin-left: $euiDataGridCellPaddingM;
      width: $euiSizeM;
    }

    .euiDataGridRowCell__actionButtonIcon {
      animation: none;
      margin-left: $euiDataGridCellPaddingM;
      width: $euiSizeM;
    }
  }

  // on focus, directly show action buttons (without animation), but still slide in the open popover button
  &:focus {
    .euiDataGridRowCell__actionButtonIcon {
      margin-left: $euiDataGridCellPaddingM;
      width: $euiSizeM;
    }
  }

  // if a cell is not hovered nor focused nor open via popover, don't show buttons in general
  &:not(:hover):not(:focus):not(.euiDataGridRowCell--open) {
    .euiDataGridRowCell__expandButtonIcon,
    .euiDataGridRowCell__actionButtonIcon {
      display: none;
    }
  }

  &:focus:not(:first-of-type) {
    // Needed because the focus state adds a border, which needs to be subtracted from padding
    padding-left: $euiDataGridCellPaddingM - 1px;
  }

  &.euiDataGridRowCell--numeric {
    text-align: right;
  }

  &.euiDataGridRowCell--currency {
    text-align: right;
  }


  &.euiDataGridRowCell--boolean {
    text-transform: capitalize;
  }

  // We only truncate if the cell is not a control column.
  &:not(.euiDataGridRowCell--controlColumn) {
    .euiDataGridRowCell__content,
    .euiDataGridRowCell__truncate,
    &.euiDataGridRowCell__truncate,
    .euiDataGridRowCell__expandContent {
      @include euiTextTruncate;
      overflow: hidden;
      white-space: nowrap;
    }
  }

}

.euiDataGridRowCell__popover {
  @include euiScrollBar;
  overflow: auto;
  // sass-lint:disable-block no-important
  max-width: 400px !important;
  max-height: 400px !important;
}

.euiDataGridRowCell__expand {
  width: 100%;
  max-width: 100%;
}

.euiDataGridRowCell__expandFlex {
  display: flex;
  align-items: center;
}

.euiDataGridRowCell__expandContent {
  flex-grow: 1;
}

.euiDataGridRowCell__expandButton {
  display: flex;
  flex-grow: 0;
}

.euiDataGridRowCell__expandButtonIcon {
  height: $euiSizeM;
  border-radius: $euiBorderRadius / 2;
  width: 0;
  overflow: hidden;
  transition: none; // Have to take out the generic transition so it is instaneous on focus
  box-shadow: none !important; // sass-lint:disable-line no-important
  // Remove default .euiButtonIcon--fill border
  // This way we don't need to animate the border that is inexistent in Amsterdam and unnecessary for a fill button
  border: none;

  &-isActive {
    margin-left: $euiDataGridCellPaddingM;
    width: $euiSizeM;
  }
}

.euiDataGridRowCell__actionButtonIcon {
  height: $euiSizeM;
  border-radius: $euiBorderRadius / 2;
  width: 0;
  overflow: hidden;
  transition: none; // Have to take out the generic transition so it is instaneous on focus
}

// Row highlights
@include euiDataGridStyles(rowHoverHighlight) {
  .euiDataGridRow:hover {
    @include euiDataGridRowCell {
      // sass-lint:disable-block no-important
      // Needed to overtake striping
      background-color: $euiColorHighlight !important;
    }
  }
}

// Stripes
@include euiDataGridStyles(stripes) {
  @include euiDataGridRowCell {
    &.euiDataGridRowCell--stripe {
      background: $euiColorLightestShade;
    }
  }
}

// Border alternates
@include euiDataGridStyles(bordersNone) {
  @include euiDataGridRowCell {
    // sass-lint:disable-block no-important
    border-color: transparent !important;
  }
}

@include euiDataGridStyles(bordersHorizontal) {
  @include euiDataGridRowCell {
    border-right-color: transparent;
    border-left-color: transparent;
  }
}

// Font alternates
@include euiDataGridStyles(fontSizeSmall) {
  @include euiDataGridRowCell {
    @include euiFontSizeXS;
  }
}

@include euiDataGridStyles(fontSizeLarge) {
  @include euiDataGridRowCell {
    @include euiFontSize;
  }
}

// Padding alternates
@include euiDataGridStyles(paddingSmall) {
  @include euiDataGridRowCell {
    padding: $euiDataGridCellPaddingS;

    &:focus:not(:first-of-type) {
      // Needed because the focus state adds a border, which needs to be subtracted from padding
      padding-left: $euiDataGridCellPaddingS - 1px;
    }
  }
}

@include euiDataGridStyles(paddingLarge) {
  @include euiDataGridRowCell {
    padding: $euiDataGridCellPaddingL;

    &:focus:not(:first-of-type) {
      // Needed because the focus state adds a border, which needs to be subtracted from padding
      padding-left: $euiDataGridCellPaddingL - 1px;
    }
  }
}

@keyframes euiDataGridCellButtonSlideIn {
  from {
    margin-left: 0;
    width: 0;
  }

  to {
    margin-left: $euiDataGridCellPaddingM;
    width: $euiSizeM;
  }
}
